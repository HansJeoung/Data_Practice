{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "premium"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 232,
      "metadata": {
        "id": "SQ4ijsyMhlmL"
      },
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(action='ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6KuottS-FZ5C",
        "outputId": "3160fca3-2119-4c43-9a51-88c5b5aa4cde"
      },
      "execution_count": 233,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "fonts-nanum is already the newest version (20180306-3).\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-510\n",
            "Use 'sudo apt autoremove' to remove it.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 27 not upgraded.\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/usr/share/fonts/truetype: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U imbalanced-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LobfYK5dygOa",
        "outputId": "e8ddbc9a-c8d7-4b58-cc32-e80954d31f0c"
      },
      "execution_count": 234,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.8/dist-packages (0.10.1)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.7.3)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.21.6)\n",
            "Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.0.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (3.1.0)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from imbalanced-learn) (1.2.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.rc('font', family='NanumBarunGothic')"
      ],
      "metadata": {
        "id": "xPg6RoiQkrGR"
      },
      "execution_count": 235,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##변수 설명"
      ],
      "metadata": {
        "id": "kbt40zM6l8Qm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "features=pd.read_csv('/content/drive/MyDrive/개인프로젝트/연습/데이터 사이언티스트(캐글)/변수설명.csv')\n",
        "features.iloc[0:13]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "Brm88aehhorX",
        "outputId": "dd2867a0-39f2-4eae-9ebb-9fc4c32603e6"
      },
      "execution_count": 236,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 enrollee_id                     enrollee_id : 후보의 고유 ID\n",
              "0                        city                                  도시: 도시 코드\n",
              "1   city_ development _index   city_ development _ index : 도시의 개발지수 (척도)\n",
              "2                      gender                            gender: 후보자의 성별\n",
              "3         relevent_experience              revent_experience: 후보자의 관련 경험\n",
              "4         enrolled_university               등록된_대학: 등록된 대학 과정의 유형(있는 경우)\n",
              "5             education_level                          교육_수준: 지원자의 교육 수준\n",
              "6            major_discipline                       전공_분야 : 후보자의 교육 전공분야\n",
              "7                  experience                           경험: 응시자의 연간 총 경험\n",
              "8                company_size                     회사_크기: 현재 고용주 회사의 직원 수\n",
              "9                company_type                  company_type : 현재 고용주의 유형\n",
              "10               last_new_job          last_new_job: 이전 직업과 현재 직업의 연도 차이\n",
              "11             training_hours                   training_hours: 교육 완료 시간\n",
              "12                     target          대상: 0 – 이직을 원하지 않음, 1 – 이직을 찾고 있음"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a52694fd-5d38-4e9c-8a3a-5159df280254\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>enrollee_id</th>\n",
              "      <th>enrollee_id : 후보의 고유 ID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>city</td>\n",
              "      <td>도시: 도시 코드</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>city_ development _index</td>\n",
              "      <td>city_ development _ index : 도시의 개발지수 (척도)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>gender</td>\n",
              "      <td>gender: 후보자의 성별</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>relevent_experience</td>\n",
              "      <td>revent_experience: 후보자의 관련 경험</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>enrolled_university</td>\n",
              "      <td>등록된_대학: 등록된 대학 과정의 유형(있는 경우)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>education_level</td>\n",
              "      <td>교육_수준: 지원자의 교육 수준</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>major_discipline</td>\n",
              "      <td>전공_분야 : 후보자의 교육 전공분야</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>experience</td>\n",
              "      <td>경험: 응시자의 연간 총 경험</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>company_size</td>\n",
              "      <td>회사_크기: 현재 고용주 회사의 직원 수</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>company_type</td>\n",
              "      <td>company_type : 현재 고용주의 유형</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>last_new_job</td>\n",
              "      <td>last_new_job: 이전 직업과 현재 직업의 연도 차이</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>training_hours</td>\n",
              "      <td>training_hours: 교육 완료 시간</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>target</td>\n",
              "      <td>대상: 0 – 이직을 원하지 않음, 1 – 이직을 찾고 있음</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a52694fd-5d38-4e9c-8a3a-5159df280254')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a52694fd-5d38-4e9c-8a3a-5159df280254 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a52694fd-5d38-4e9c-8a3a-5159df280254');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 236
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 훈련 데이터 살펴보기"
      ],
      "metadata": {
        "id": "Jvmcl45rmWO3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data=pd.read_csv('/content/drive/MyDrive/개인프로젝트/연습/데이터 사이언티스트(캐글)/aug_train.csv')\n",
        "train_data.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "PrhdmC1jhouM",
        "outputId": "e3d49e99-1d05-4497-88c7-7a1f41f5c7a3"
      },
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   enrollee_id      city  city_development_index gender  \\\n",
              "0         8949  city_103                   0.920   Male   \n",
              "1        29725   city_40                   0.776   Male   \n",
              "2        11561   city_21                   0.624    NaN   \n",
              "3        33241  city_115                   0.789    NaN   \n",
              "4          666  city_162                   0.767   Male   \n",
              "\n",
              "       relevent_experience enrolled_university education_level  \\\n",
              "0  Has relevent experience       no_enrollment        Graduate   \n",
              "1   No relevent experience       no_enrollment        Graduate   \n",
              "2   No relevent experience    Full time course        Graduate   \n",
              "3   No relevent experience                 NaN        Graduate   \n",
              "4  Has relevent experience       no_enrollment         Masters   \n",
              "\n",
              "  major_discipline experience company_size    company_type last_new_job  \\\n",
              "0             STEM        >20          NaN             NaN            1   \n",
              "1             STEM         15        50-99         Pvt Ltd           >4   \n",
              "2             STEM          5          NaN             NaN        never   \n",
              "3  Business Degree         <1          NaN         Pvt Ltd        never   \n",
              "4             STEM        >20        50-99  Funded Startup            4   \n",
              "\n",
              "   training_hours  target  \n",
              "0              36     1.0  \n",
              "1              47     0.0  \n",
              "2              83     0.0  \n",
              "3              52     1.0  \n",
              "4               8     0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e3fc698-d7ef-4ba4-8fde-59ec5c5f5e21\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>enrollee_id</th>\n",
              "      <th>city</th>\n",
              "      <th>city_development_index</th>\n",
              "      <th>gender</th>\n",
              "      <th>relevent_experience</th>\n",
              "      <th>enrolled_university</th>\n",
              "      <th>education_level</th>\n",
              "      <th>major_discipline</th>\n",
              "      <th>experience</th>\n",
              "      <th>company_size</th>\n",
              "      <th>company_type</th>\n",
              "      <th>last_new_job</th>\n",
              "      <th>training_hours</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8949</td>\n",
              "      <td>city_103</td>\n",
              "      <td>0.920</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>36</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>29725</td>\n",
              "      <td>city_40</td>\n",
              "      <td>0.776</td>\n",
              "      <td>Male</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>15</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>&gt;4</td>\n",
              "      <td>47</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>11561</td>\n",
              "      <td>city_21</td>\n",
              "      <td>0.624</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>Full time course</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>never</td>\n",
              "      <td>83</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33241</td>\n",
              "      <td>city_115</td>\n",
              "      <td>0.789</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Business Degree</td>\n",
              "      <td>&lt;1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>never</td>\n",
              "      <td>52</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>666</td>\n",
              "      <td>city_162</td>\n",
              "      <td>0.767</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Masters</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Funded Startup</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e3fc698-d7ef-4ba4-8fde-59ec5c5f5e21')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6e3fc698-d7ef-4ba4-8fde-59ec5c5f5e21 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6e3fc698-d7ef-4ba4-8fde-59ec5c5f5e21');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data=pd.read_csv('/content/drive/MyDrive/개인프로젝트/연습/데이터 사이언티스트(캐글)/aug_test.csv')"
      ],
      "metadata": {
        "id": "XdhNDPidmlgQ"
      },
      "execution_count": 238,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##데이터 파악하기"
      ],
      "metadata": {
        "id": "v7I1TZ4c202F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o4SJES_lETUL",
        "outputId": "834a0cac-7541-4829-cb43-f07cd393a643"
      },
      "execution_count": 239,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 19158 entries, 0 to 19157\n",
            "Data columns (total 14 columns):\n",
            " #   Column                  Non-Null Count  Dtype  \n",
            "---  ------                  --------------  -----  \n",
            " 0   enrollee_id             19158 non-null  int64  \n",
            " 1   city                    19158 non-null  object \n",
            " 2   city_development_index  19158 non-null  float64\n",
            " 3   gender                  14650 non-null  object \n",
            " 4   relevent_experience     19158 non-null  object \n",
            " 5   enrolled_university     18772 non-null  object \n",
            " 6   education_level         18698 non-null  object \n",
            " 7   major_discipline        16345 non-null  object \n",
            " 8   experience              19093 non-null  object \n",
            " 9   company_size            13220 non-null  object \n",
            " 10  company_type            13018 non-null  object \n",
            " 11  last_new_job            18735 non-null  object \n",
            " 12  training_hours          19158 non-null  int64  \n",
            " 13  target                  19158 non-null  float64\n",
            "dtypes: float64(2), int64(2), object(10)\n",
            "memory usage: 2.0+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "LJwKY3eC6pUQ",
        "outputId": "3a379c24-6d46-4e63-e1e0-73766f636785"
      },
      "execution_count": 240,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        enrollee_id  city_development_index  training_hours        target\n",
              "count  19158.000000            19158.000000    19158.000000  19158.000000\n",
              "mean   16875.358179                0.828848       65.366896      0.249348\n",
              "std     9616.292592                0.123362       60.058462      0.432647\n",
              "min        1.000000                0.448000        1.000000      0.000000\n",
              "25%     8554.250000                0.740000       23.000000      0.000000\n",
              "50%    16982.500000                0.903000       47.000000      0.000000\n",
              "75%    25169.750000                0.920000       88.000000      0.000000\n",
              "max    33380.000000                0.949000      336.000000      1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da3ec94f-b9a4-4a8f-a734-4dea081f2807\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>enrollee_id</th>\n",
              "      <th>city_development_index</th>\n",
              "      <th>training_hours</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>19158.000000</td>\n",
              "      <td>19158.000000</td>\n",
              "      <td>19158.000000</td>\n",
              "      <td>19158.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>16875.358179</td>\n",
              "      <td>0.828848</td>\n",
              "      <td>65.366896</td>\n",
              "      <td>0.249348</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9616.292592</td>\n",
              "      <td>0.123362</td>\n",
              "      <td>60.058462</td>\n",
              "      <td>0.432647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.448000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>8554.250000</td>\n",
              "      <td>0.740000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>16982.500000</td>\n",
              "      <td>0.903000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>25169.750000</td>\n",
              "      <td>0.920000</td>\n",
              "      <td>88.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>33380.000000</td>\n",
              "      <td>0.949000</td>\n",
              "      <td>336.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da3ec94f-b9a4-4a8f-a734-4dea081f2807')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-da3ec94f-b9a4-4a8f-a734-4dea081f2807 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-da3ec94f-b9a4-4a8f-a734-4dea081f2807');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 240
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#결측치 파악하기\n",
        "print(pd.isna(train_data).sum().sort_values(ascending=False))\n",
        "print(train_data.shape)\n",
        "print('-'*30)\n",
        "print(pd.isna(test_data).sum())\n",
        "print(test_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPupIuPnDbx1",
        "outputId": "90a42532-cc9c-4695-d1b0-4a5de5b9f9d5"
      },
      "execution_count": 241,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "company_type              6140\n",
            "company_size              5938\n",
            "gender                    4508\n",
            "major_discipline          2813\n",
            "education_level            460\n",
            "last_new_job               423\n",
            "enrolled_university        386\n",
            "experience                  65\n",
            "enrollee_id                  0\n",
            "city                         0\n",
            "city_development_index       0\n",
            "relevent_experience          0\n",
            "training_hours               0\n",
            "target                       0\n",
            "dtype: int64\n",
            "(19158, 14)\n",
            "------------------------------\n",
            "enrollee_id                 0\n",
            "city                        0\n",
            "city_development_index      0\n",
            "gender                    508\n",
            "relevent_experience         0\n",
            "enrolled_university        31\n",
            "education_level            52\n",
            "major_discipline          312\n",
            "experience                  5\n",
            "company_size              622\n",
            "company_type              634\n",
            "last_new_job               40\n",
            "training_hours              0\n",
            "dtype: int64\n",
            "(2129, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_data.shape)\n",
        "print(test_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8unOPMA6Fcv6",
        "outputId": "cd8c1bbf-840b-4d1f-c7e5-a8aba4d876b7"
      },
      "execution_count": 242,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(19158, 14)\n",
            "(2129, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###눈에 당장 보이는 필요 없는 변수 제거하기"
      ],
      "metadata": {
        "id": "FBr-XmJF4wvs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#ID 변수 제거하기\n",
        "test_data=test_data.drop(columns='enrollee_id')\n",
        "train_data=train_data.drop(columns='enrollee_id')\n",
        "train_data.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "i0KtLosBmpIK",
        "outputId": "622dd516-8574-4fc9-903b-054eacd9678a"
      },
      "execution_count": 243,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       city  city_development_index gender      relevent_experience  \\\n",
              "0  city_103                   0.920   Male  Has relevent experience   \n",
              "1   city_40                   0.776   Male   No relevent experience   \n",
              "2   city_21                   0.624    NaN   No relevent experience   \n",
              "3  city_115                   0.789    NaN   No relevent experience   \n",
              "4  city_162                   0.767   Male  Has relevent experience   \n",
              "\n",
              "  enrolled_university education_level major_discipline experience  \\\n",
              "0       no_enrollment        Graduate             STEM        >20   \n",
              "1       no_enrollment        Graduate             STEM         15   \n",
              "2    Full time course        Graduate             STEM          5   \n",
              "3                 NaN        Graduate  Business Degree         <1   \n",
              "4       no_enrollment         Masters             STEM        >20   \n",
              "\n",
              "  company_size    company_type last_new_job  training_hours  target  \n",
              "0          NaN             NaN            1              36     1.0  \n",
              "1        50-99         Pvt Ltd           >4              47     0.0  \n",
              "2          NaN             NaN        never              83     0.0  \n",
              "3          NaN         Pvt Ltd        never              52     1.0  \n",
              "4        50-99  Funded Startup            4               8     0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d8a089de-6bbd-4e91-8370-1fac91029a36\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>city</th>\n",
              "      <th>city_development_index</th>\n",
              "      <th>gender</th>\n",
              "      <th>relevent_experience</th>\n",
              "      <th>enrolled_university</th>\n",
              "      <th>education_level</th>\n",
              "      <th>major_discipline</th>\n",
              "      <th>experience</th>\n",
              "      <th>company_size</th>\n",
              "      <th>company_type</th>\n",
              "      <th>last_new_job</th>\n",
              "      <th>training_hours</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>city_103</td>\n",
              "      <td>0.920</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>36</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>city_40</td>\n",
              "      <td>0.776</td>\n",
              "      <td>Male</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>15</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>&gt;4</td>\n",
              "      <td>47</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>city_21</td>\n",
              "      <td>0.624</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>Full time course</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>never</td>\n",
              "      <td>83</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>city_115</td>\n",
              "      <td>0.789</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Business Degree</td>\n",
              "      <td>&lt;1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>never</td>\n",
              "      <td>52</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>city_162</td>\n",
              "      <td>0.767</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Masters</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Funded Startup</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d8a089de-6bbd-4e91-8370-1fac91029a36')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d8a089de-6bbd-4e91-8370-1fac91029a36 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d8a089de-6bbd-4e91-8370-1fac91029a36');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 243
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#target_data\n",
        "#target_data=train_data['target']\n",
        "#train_data=train_data.drop(columns='target')"
      ],
      "metadata": {
        "id": "OUxQ1Spb5kKU"
      },
      "execution_count": 244,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#city 변수 정리\n",
        "train_data['city']=train_data['city'].str.split('_').str[1]"
      ],
      "metadata": {
        "id": "XMm4iyja6HNI"
      },
      "execution_count": 245,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data['city']=test_data['city'].str.split('_').str[1]"
      ],
      "metadata": {
        "id": "xUY5xQOgciNr"
      },
      "execution_count": 246,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "_pK9CAQNCFSh",
        "outputId": "a0c527b5-1544-4cd7-adb8-c42c211afb10"
      },
      "execution_count": 247,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      city  city_development_index gender      relevent_experience  \\\n",
              "0      103                   0.920   Male  Has relevent experience   \n",
              "1       40                   0.776   Male   No relevent experience   \n",
              "2       21                   0.624    NaN   No relevent experience   \n",
              "3      115                   0.789    NaN   No relevent experience   \n",
              "4      162                   0.767   Male  Has relevent experience   \n",
              "...    ...                     ...    ...                      ...   \n",
              "19153  173                   0.878   Male   No relevent experience   \n",
              "19154  103                   0.920   Male  Has relevent experience   \n",
              "19155  103                   0.920   Male  Has relevent experience   \n",
              "19156   65                   0.802   Male  Has relevent experience   \n",
              "19157   67                   0.855    NaN   No relevent experience   \n",
              "\n",
              "      enrolled_university education_level major_discipline experience  \\\n",
              "0           no_enrollment        Graduate             STEM        >20   \n",
              "1           no_enrollment        Graduate             STEM         15   \n",
              "2        Full time course        Graduate             STEM          5   \n",
              "3                     NaN        Graduate  Business Degree         <1   \n",
              "4           no_enrollment         Masters             STEM        >20   \n",
              "...                   ...             ...              ...        ...   \n",
              "19153       no_enrollment        Graduate       Humanities         14   \n",
              "19154       no_enrollment        Graduate             STEM         14   \n",
              "19155       no_enrollment        Graduate             STEM        >20   \n",
              "19156       no_enrollment     High School              NaN         <1   \n",
              "19157       no_enrollment  Primary School              NaN          2   \n",
              "\n",
              "      company_size    company_type last_new_job  training_hours  target  \n",
              "0              NaN             NaN            1              36     1.0  \n",
              "1            50-99         Pvt Ltd           >4              47     0.0  \n",
              "2              NaN             NaN        never              83     0.0  \n",
              "3              NaN         Pvt Ltd        never              52     1.0  \n",
              "4            50-99  Funded Startup            4               8     0.0  \n",
              "...            ...             ...          ...             ...     ...  \n",
              "19153          NaN             NaN            1              42     1.0  \n",
              "19154          NaN             NaN            4              52     1.0  \n",
              "19155        50-99         Pvt Ltd            4              44     0.0  \n",
              "19156      500-999         Pvt Ltd            2              97     0.0  \n",
              "19157          NaN             NaN            1             127     0.0  \n",
              "\n",
              "[19158 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-916c35a6-e6d0-470c-9359-380e0c560424\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>city</th>\n",
              "      <th>city_development_index</th>\n",
              "      <th>gender</th>\n",
              "      <th>relevent_experience</th>\n",
              "      <th>enrolled_university</th>\n",
              "      <th>education_level</th>\n",
              "      <th>major_discipline</th>\n",
              "      <th>experience</th>\n",
              "      <th>company_size</th>\n",
              "      <th>company_type</th>\n",
              "      <th>last_new_job</th>\n",
              "      <th>training_hours</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>103</td>\n",
              "      <td>0.920</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>36</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>40</td>\n",
              "      <td>0.776</td>\n",
              "      <td>Male</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>15</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>&gt;4</td>\n",
              "      <td>47</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21</td>\n",
              "      <td>0.624</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>Full time course</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>never</td>\n",
              "      <td>83</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>115</td>\n",
              "      <td>0.789</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Business Degree</td>\n",
              "      <td>&lt;1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>never</td>\n",
              "      <td>52</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>162</td>\n",
              "      <td>0.767</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Masters</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Funded Startup</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19153</th>\n",
              "      <td>173</td>\n",
              "      <td>0.878</td>\n",
              "      <td>Male</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Humanities</td>\n",
              "      <td>14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>42</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19154</th>\n",
              "      <td>103</td>\n",
              "      <td>0.920</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4</td>\n",
              "      <td>52</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19155</th>\n",
              "      <td>103</td>\n",
              "      <td>0.920</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>STEM</td>\n",
              "      <td>&gt;20</td>\n",
              "      <td>50-99</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>4</td>\n",
              "      <td>44</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19156</th>\n",
              "      <td>65</td>\n",
              "      <td>0.802</td>\n",
              "      <td>Male</td>\n",
              "      <td>Has relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>High School</td>\n",
              "      <td>NaN</td>\n",
              "      <td>&lt;1</td>\n",
              "      <td>500-999</td>\n",
              "      <td>Pvt Ltd</td>\n",
              "      <td>2</td>\n",
              "      <td>97</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>67</td>\n",
              "      <td>0.855</td>\n",
              "      <td>NaN</td>\n",
              "      <td>No relevent experience</td>\n",
              "      <td>no_enrollment</td>\n",
              "      <td>Primary School</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>127</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>19158 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-916c35a6-e6d0-470c-9359-380e0c560424')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-916c35a6-e6d0-470c-9359-380e0c560424 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-916c35a6-e6d0-470c-9359-380e0c560424');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 247
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#EDA "
      ],
      "metadata": {
        "id": "MAk3C6eoIzTR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Target\n",
        "데이터가 한쪽으로 치우쳐진 경향이 있다."
      ],
      "metadata": {
        "id": "Z89ZD3DDI2ql"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='target', data=train_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "UU6HwPo4CF_k",
        "outputId": "5a549be1-860c-475c-ee9c-33b3b3fdbc74"
      },
      "execution_count": 248,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16d12aa910>"
            ]
          },
          "metadata": {},
          "execution_count": 248
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###City\n",
        "대부분의 도시구역에서는 이직의사가 없지만 11구역, 21구역에서는 이직의사 비율이 많이 높은 것이 확인되어 두구역에 대한 조사 필요"
      ],
      "metadata": {
        "id": "WO-m_h7JJsJg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['city']=train_data['city'].astype('int') #훈련 데이터 전처리\n",
        "test_data['city']=test_data['city'].astype('int')\n",
        "\n",
        "fig=plt.figure(figsize=(80,10))\n",
        "ax1=fig.add_subplot(1,6,1)\n",
        "ax2=fig.add_subplot(1,6,2)\n",
        "ax3=fig.add_subplot(1,6,3)\n",
        "ax4=fig.add_subplot(1,6,4)\n",
        "\n",
        "\n",
        "sns.distplot(train_data['city'], ax=ax1,kde=True)\n",
        "\n",
        "city_count=train_data.groupby(['city', 'target'],as_index=False).agg(count=('city','count'))\n",
        "city_count['city']=city_count['city'].astype('int')\n",
        "print(city_count)\n",
        "\n",
        "\n",
        "sns.barplot(x='city', y='count',data=city_count ,hue='target', ax=ax2)\n",
        "ax2.set_xlim([1,41])\n",
        "\n",
        "sns.barplot(x='city', y='count',data=city_count ,hue='target', ax=ax3)\n",
        "ax3.set_xlim([41,81])\n",
        "\n",
        "sns.barplot(x='city', y='count',data=city_count ,hue='target', ax=ax4)\n",
        "ax4.set_xlim([81,121])\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 567
        },
        "id": "9pyrDus9I5-Q",
        "outputId": "a0fa8798-10a5-449a-e676-96f15a4e278c"
      },
      "execution_count": 249,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     city  target  count\n",
            "0       1     0.0     23\n",
            "1       1     1.0      3\n",
            "2       2     0.0      7\n",
            "3       7     0.0     22\n",
            "4       7     1.0      5\n",
            "..    ...     ...    ...\n",
            "232   176     1.0      7\n",
            "233   179     0.0      2\n",
            "234   179     1.0      3\n",
            "235   180     0.0      5\n",
            "236   180     1.0      2\n",
            "\n",
            "[237 rows x 3 columns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(81.0, 121.0)"
            ]
          },
          "metadata": {},
          "execution_count": 249
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 5760x720 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#city와 city_development_index의 상관계수\n",
        "train_data[['city','city_development_index']].corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "zMp8XiDtKk1m",
        "outputId": "bc73db79-a774-45cc-e2c2-74465b5609dd"
      },
      "execution_count": 250,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                            city  city_development_index\n",
              "city                    1.000000                0.410647\n",
              "city_development_index  0.410647                1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d23b14f-c9cd-40d1-9b22-e3ea475f3410\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>city</th>\n",
              "      <th>city_development_index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.410647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city_development_index</th>\n",
              "      <td>0.410647</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d23b14f-c9cd-40d1-9b22-e3ea475f3410')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3d23b14f-c9cd-40d1-9b22-e3ea475f3410 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3d23b14f-c9cd-40d1-9b22-e3ea475f3410');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 250
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.drop(columns='city', inplace=True)"
      ],
      "metadata": {
        "id": "HI_SLFQWOCyz"
      },
      "execution_count": 251,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###City_development_index\n",
        "\n",
        "도시개발 지수가 낮을 수록 이직 의사가 있는 것으로 파악된다."
      ],
      "metadata": {
        "id": "Ee4FbAb5eDVY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i=np.arange(0.45,1,0.05)\n",
        "i=np.round(i,2)\n",
        "i=list(i)\n",
        "i\n",
        "\n",
        "train_data['city_development_index']=np.where(train_data['city_development_index'] <= 0.45, 0.45,  \n",
        "                                              np.where(train_data['city_development_index'] <= 0.5, 0.5,\n",
        "                                              np.where(train_data['city_development_index'] <= 0.55,0.55,\n",
        "                                              np.where(train_data['city_development_index'] <=0.6, 0.6,\n",
        "                                              np.where(train_data['city_development_index'] <=0.65,0.65,\n",
        "                                              np.where(train_data['city_development_index'] <=0.7, 0.7,\n",
        "                                              np.where(train_data['city_development_index'] <=0.75, 0.75,\n",
        "                                              np.where(train_data['city_development_index'] <=0.8, 0.8,\n",
        "                                              np.where(train_data['city_development_index'] <=0.85, 0.85,\n",
        "                                              np.where(train_data['city_development_index'] <=0.9, 0.9,\n",
        "                                              np.where(train_data['city_development_index'] <=0.95, 0.95,0.95)))))))))))\n",
        "\n",
        "test_data['city_development_index']=np.where(test_data['city_development_index'] <= 0.45, 0.45,  \n",
        "                                              np.where(test_data['city_development_index'] <= 0.5, 0.5,\n",
        "                                              np.where(test_data['city_development_index'] <= 0.55,0.55,\n",
        "                                              np.where(test_data['city_development_index'] <=0.6, 0.6,\n",
        "                                              np.where(test_data['city_development_index'] <=0.65,0.65,\n",
        "                                              np.where(test_data['city_development_index'] <=0.7, 0.7,\n",
        "                                              np.where(test_data['city_development_index'] <=0.75, 0.75,\n",
        "                                              np.where(test_data['city_development_index'] <=0.8, 0.8,\n",
        "                                              np.where(test_data['city_development_index'] <=0.85, 0.85,\n",
        "                                              np.where(test_data['city_development_index'] <=0.9, 0.9,\n",
        "                                              np.where(test_data['city_development_index'] <=0.95, 0.95,0.95)))))))))))\n",
        "                                              \n",
        "\n",
        "\n",
        "df_development=train_data.groupby(['city_development_index', 'target'],as_index=False).agg(count=('target','count'))                       \n",
        "df_development                        \n",
        "\n",
        "fig=plt.figure(figsize=(30,5))\n",
        "ax1=fig.add_subplot(1,3,1)\n",
        "ax2=fig.add_subplot(1,3,2)\n",
        "ax3=fig.add_subplot(1,3,3)\n",
        "\n",
        "\n",
        "\n",
        "# sns.histplot(train_data['city_development_index'], kde=True, ax=ax1)\n",
        "# sns.scatterplot(x='city', y='city_development_index', data=train_data, ax=ax2, hue='target')\n",
        "# ax2.legend(loc=(1.0,1.0))\n",
        "# sns.barplot(x='city_development_index', y='count',data=df_development  ,hue='target', ax=ax3)\n",
        "# ax3.set_xlim([1,9])\n",
        "\n"
      ],
      "metadata": {
        "id": "z-1nc6owMeGt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "outputId": "126ccf68-17d4-4123-a917-88b3acc635f6"
      },
      "execution_count": 252,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2160x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### gender\n",
        "성별은 남여상관없이 대부분 이직 의사가 없기 때문에 과적합 방지로 변수를 삭제하였다.(중요도가 낮은 변수라고 판단하였다.)"
      ],
      "metadata": {
        "id": "EmJ-kMnLoLSM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_data['gender'].value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eS2ZR96WwMI5",
        "outputId": "28af8b84-3cd8-4205-d67c-30ca24c9eb55"
      },
      "execution_count": 253,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male      13221\n",
            "Female     1238\n",
            "Other       191\n",
            "Name: gender, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('gender 결측치 갯수')\n",
        "pd.isna(train_data['gender']).sum()\n",
        "fig=plt.figure(figsize=(30,5))\n",
        "ax1=fig.add_subplot(1,3,1)\n",
        "\n",
        "sns.countplot(x='gender', data=train_data, hue='target')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 370
        },
        "id": "1MC4WeGYnTKf",
        "outputId": "aada3667-4b20-4473-a2a2-c0c7bd223ca5"
      },
      "execution_count": 254,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gender 결측치 갯수\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16e2f9a100>"
            ]
          },
          "metadata": {},
          "execution_count": 254
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2160x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.drop(columns='gender', inplace=True)\n",
        "test_data.drop(columns='gender', inplace=True)"
      ],
      "metadata": {
        "id": "FN6ZJHJtNEbl"
      },
      "execution_count": 255,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###relevent_experience\n",
        "관련경험이 없는 사람들이 다소 높게 이직의사가 있는 것으로 보인다."
      ],
      "metadata": {
        "id": "hInifJZ_DW01"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['relevent_experience']=np.where(train_data['relevent_experience']=='Has relevent experience',1,0)\n",
        "test_data['relevent_experience']=np.where(test_data['relevent_experience']=='Has relevent experience',1,0)"
      ],
      "metadata": {
        "id": "EwZg1wDCDW8s"
      },
      "execution_count": 256,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='relevent_experience', data=train_data, hue='target')\n",
        "percent_data=train_data.groupby(['relevent_experience','target'],as_index=False).agg(count=('target','count'))\n",
        "\n",
        "percent_data_0=percent_data.query('relevent_experience==0')\n",
        "percent_data_1=percent_data.query('relevent_experience==1')\n",
        "\n",
        "percent_data_0['total_percent']=np.round(percent_data_0['count']/sum(percent_data_0['count']),2)\n",
        "percent_data_1['total_percent']=np.round(percent_data_1['count']/sum(percent_data_1['count']),2)\n",
        "\n",
        "print(percent_data_0)\n",
        "print(percent_data_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "CbjSnNLTDXQU",
        "outputId": "d39cb037-563f-468d-98be-d046685f232a"
      },
      "execution_count": 257,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   relevent_experience  target  count  total_percent\n",
            "0                    0     0.0   3550           0.66\n",
            "1                    0     1.0   1816           0.34\n",
            "   relevent_experience  target  count  total_percent\n",
            "2                    1     0.0  10831           0.79\n",
            "3                    1     1.0   2961           0.21\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###enrolled_university\n",
        "결측치가 전체 데이터의 2%라서 결측지는 제거하는 방향으로 진행하였고 full_time 집단이 상대적으로 이직 의사가 있는 것으로 판단되었다."
      ],
      "metadata": {
        "id": "OI9sHceb2vn5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.dropna(subset=['enrolled_university'], inplace=True)\n",
        "test_data.dropna(subset=['enrolled_university'], inplace=True)"
      ],
      "metadata": {
        "id": "3VcUUnV6U4KY"
      },
      "execution_count": 258,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(pd.isna(train_data['enrolled_university']).sum())\n",
        "print(train_data['enrolled_university'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bzyKnPhs7-uh",
        "outputId": "82af40c3-d308-4284-b646-1891df45bda5"
      },
      "execution_count": 259,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "no_enrollment       13817\n",
            "Full time course     3757\n",
            "Part time course     1198\n",
            "Name: enrolled_university, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "\n",
        "enrolled_university=train_data.groupby(['enrolled_university','target'],as_index=False).agg(count=('target','count'))\n",
        "print(enrolled_university)\n",
        "print()\n",
        "\n",
        "Full_time_course=enrolled_university.query('enrolled_university==\"Full time course\"')\n",
        "Full_time_course['percent']=np.round(Full_time_course['count']/sum(Full_time_course['count']),2)\n",
        "\n",
        "Part_time_course=enrolled_university.query('enrolled_university==\"Part time course\"')\n",
        "Part_time_course['percent']=np.round(Part_time_course['count']/sum(Part_time_course['count']),2)\n",
        "\n",
        "no_enrollment=enrolled_university.query('enrolled_university==\"no_enrollment\"')\n",
        "no_enrollment['percent']=np.round(no_enrollment['count']/sum(no_enrollment['count']),2)\n",
        "\n",
        "print(Full_time_course)\n",
        "print()\n",
        "print(Part_time_course)\n",
        "print()\n",
        "print(no_enrollment)\n",
        "print()\n",
        "\n",
        "sns.barplot(x='enrolled_university', y='count' ,data=enrolled_university, hue='target',ax=ax1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "id": "C-2z6LL87_dv",
        "outputId": "32ab112f-0da7-4bd4-fe92-25155e50d09b"
      },
      "execution_count": 260,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  enrolled_university  target  count\n",
            "0    Full time course     0.0   2326\n",
            "1    Full time course     1.0   1431\n",
            "2    Part time course     0.0    896\n",
            "3    Part time course     1.0    302\n",
            "4       no_enrollment     0.0  10896\n",
            "5       no_enrollment     1.0   2921\n",
            "\n",
            "  enrolled_university  target  count  percent\n",
            "0    Full time course     0.0   2326     0.62\n",
            "1    Full time course     1.0   1431     0.38\n",
            "\n",
            "  enrolled_university  target  count  percent\n",
            "2    Part time course     0.0    896     0.75\n",
            "3    Part time course     1.0    302     0.25\n",
            "\n",
            "  enrolled_university  target  count  percent\n",
            "4       no_enrollment     0.0  10896     0.79\n",
            "5       no_enrollment     1.0   2921     0.21\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16e0ab23d0>"
            ]
          },
          "metadata": {},
          "execution_count": 260
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###education_level\n",
        "\n",
        "학사 졸업생들이 다른 학력군보다 이직원함이 더 많은 것으로 나타났다."
      ],
      "metadata": {
        "id": "_jBTZRnDIWMW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('결측치 개수:',pd.isna(train_data['education_level']).sum())\n",
        "print()\n",
        "print(train_data['education_level'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FhkQdJs2GOKn",
        "outputId": "cb8580c3-469d-402b-8c59-2446df4c6b4a"
      },
      "execution_count": 261,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "결측치 개수: 360\n",
            "\n",
            "Graduate          11427\n",
            "Masters            4308\n",
            "High School        1970\n",
            "Phd                 408\n",
            "Primary School      299\n",
            "Name: education_level, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['education_level']=train_data['education_level'].fillna('Graduate')\n",
        "test_data['education_level']=test_data['education_level'].fillna('Graduate')\n",
        "print('결측치 제거 후')\n",
        "print('결측치 개수:',pd.isna(train_data['education_level']).sum())\n",
        "print()\n",
        "print(train_data['education_level'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wTOPLNEYQAI2",
        "outputId": "03939e3e-0b8d-44f4-af46-126ec92e4292"
      },
      "execution_count": 262,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "결측치 제거 후\n",
            "결측치 개수: 0\n",
            "\n",
            "Graduate          11787\n",
            "Masters            4308\n",
            "High School        1970\n",
            "Phd                 408\n",
            "Primary School      299\n",
            "Name: education_level, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "education=train_data.groupby(['education_level','target'],as_index=False).agg(count=('target','count'))\n",
        "print(education)\n",
        "print()\n",
        "\n",
        "sns.barplot(x='education_level',y='count',data=education, hue='target')\n",
        "print()\n",
        "\n",
        "Graduate=education.query('education_level==\"Graduate\"')\n",
        "Graduate['percent']=np.round(Graduate['count']/sum(Graduate['count']),2)\n",
        "print(Graduate)\n",
        "print()\n",
        "\n",
        "high_school=education.query('education_level==\"High School\"')\n",
        "high_school['percent']=np.round(high_school['count']/sum(high_school['count']),2)\n",
        "print(high_school)\n",
        "print()\n",
        "\n",
        "masters=education.query('education_level==\"Masters\"')\n",
        "masters['percent']=np.round(masters['count']/sum(masters['count']),2)\n",
        "print(masters)\n",
        "print()\n",
        "\n",
        "phd=education.query('education_level==\"Phd\"')\n",
        "phd['percent']=np.round(phd['count']/sum(phd['count']),2)\n",
        "print(phd)\n",
        "print()\n",
        "\n",
        "primary_school=education.query('education_level==\"Primary School\"')\n",
        "primary_school['percent']=np.round(primary_school['count']/sum(primary_school['count']),2)\n",
        "print(primary_school)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 861
        },
        "id": "igodHfynRBw0",
        "outputId": "6ac4d156-7bca-4626-ed78-4a1422c4e47f"
      },
      "execution_count": 263,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  education_level  target  count\n",
            "0        Graduate     0.0   8530\n",
            "1        Graduate     1.0   3257\n",
            "2     High School     0.0   1584\n",
            "3     High School     1.0    386\n",
            "4         Masters     0.0   3394\n",
            "5         Masters     1.0    914\n",
            "6             Phd     0.0    351\n",
            "7             Phd     1.0     57\n",
            "8  Primary School     0.0    259\n",
            "9  Primary School     1.0     40\n",
            "\n",
            "\n",
            "  education_level  target  count  percent\n",
            "0        Graduate     0.0   8530     0.72\n",
            "1        Graduate     1.0   3257     0.28\n",
            "\n",
            "  education_level  target  count  percent\n",
            "2     High School     0.0   1584      0.8\n",
            "3     High School     1.0    386      0.2\n",
            "\n",
            "  education_level  target  count  percent\n",
            "4         Masters     0.0   3394     0.79\n",
            "5         Masters     1.0    914     0.21\n",
            "\n",
            "  education_level  target  count  percent\n",
            "6             Phd     0.0    351     0.86\n",
            "7             Phd     1.0     57     0.14\n",
            "\n",
            "  education_level  target  count  percent\n",
            "8  Primary School     0.0    259     0.87\n",
            "9  Primary School     1.0     40     0.13\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###major_discipline\t\n",
        "stem전공이 압도적으로 많기 때문에 결측치는 stem으로 처리했다. target은 전공별로 큰 차이는 없는것으로 보여 따로 전처리는 할 필요는 없을 것이다. "
      ],
      "metadata": {
        "id": "BOOTsfleEOa9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('결측치:', pd.isna(train_data['major_discipline']).sum())\n",
        "print()\n",
        "print(train_data['major_discipline'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LfGOlkMhETMG",
        "outputId": "7a3c3f26-6481-45a5-9a6c-0af7915e6157"
      },
      "execution_count": 264,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "결측치: 2656\n",
            "\n",
            "STEM               14284\n",
            "Humanities           660\n",
            "Other                377\n",
            "Business Degree      325\n",
            "Arts                 251\n",
            "No Major             219\n",
            "Name: major_discipline, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['major_discipline']=train_data['major_discipline'].fillna('STEM')\n",
        "print()\n",
        "print('후')\n",
        "print('결측치:', pd.isna(train_data['major_discipline']).sum())\n",
        "print()\n",
        "print(train_data['major_discipline'].value_counts())\n",
        "\n",
        "test_data['major_discipline']=test_data['major_discipline'].fillna('STEM')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "97VczAK4HIPN",
        "outputId": "0c4accb0-44fc-4ee9-97f9-96422d53657e"
      },
      "execution_count": 265,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "후\n",
            "결측치: 0\n",
            "\n",
            "STEM               16940\n",
            "Humanities           660\n",
            "Other                377\n",
            "Business Degree      325\n",
            "Arts                 251\n",
            "No Major             219\n",
            "Name: major_discipline, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "major=train_data.groupby(['major_discipline','target'],as_index=False).agg(count=('target','count'))\n",
        "print(major)\n",
        "print()\n",
        "\n",
        "sns.barplot(x='major_discipline',y='count',data=major, hue='target')\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 552
        },
        "id": "TKNdjxV3ugft",
        "outputId": "adfa6d76-693a-4b79-a856-e6f24059028a"
      },
      "execution_count": 266,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   major_discipline  target  count\n",
            "0              Arts     0.0    199\n",
            "1              Arts     1.0     52\n",
            "2   Business Degree     0.0    240\n",
            "3   Business Degree     1.0     85\n",
            "4        Humanities     0.0    522\n",
            "5        Humanities     1.0    138\n",
            "6          No Major     0.0    166\n",
            "7          No Major     1.0     53\n",
            "8             Other     0.0    277\n",
            "9             Other     1.0    100\n",
            "10             STEM     0.0  12714\n",
            "11             STEM     1.0   4226\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### experience\t\n",
        "문자형이므로 숫자형으로 바꾸어 주었다. 결측지는 60개로 그냥 삭제하였다. 마지막으로 분류문제이기 때문에 별다른 전처리는 하지는 않았다. \n",
        "\n",
        "저년차 일수록 이직의사가 있는 것으로 보인다."
      ],
      "metadata": {
        "id": "jVWENiM31IQA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(pd.isna(train_data['experience']).sum())\n",
        "print()\n",
        "print((train_data['experience'].value_counts()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tf4-khjyuyLk",
        "outputId": "df1eb809-4a96-4c32-fab1-6f8178eeda40"
      },
      "execution_count": 267,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "60\n",
            "\n",
            ">20    3255\n",
            "5      1403\n",
            "4      1365\n",
            "3      1306\n",
            "6      1180\n",
            "2      1080\n",
            "7      1014\n",
            "10      967\n",
            "9       962\n",
            "8       788\n",
            "15      677\n",
            "11      661\n",
            "14      578\n",
            "1       530\n",
            "16      504\n",
            "<1      498\n",
            "12      486\n",
            "13      392\n",
            "17      338\n",
            "19      302\n",
            "18      278\n",
            "20      148\n",
            "Name: experience, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['experience']=np.where(train_data['experience']=='>20',21,train_data['experience'])\n",
        "train_data['experience']=np.where(train_data['experience']=='<1',0,train_data['experience'])"
      ],
      "metadata": {
        "id": "1enk50lAnuPf"
      },
      "execution_count": 268,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data['experience']=np.where(test_data['experience']=='>20',21, test_data['experience'])\n",
        "test_data['experience']=np.where(test_data['experience']=='<1',0, test_data['experience'])"
      ],
      "metadata": {
        "id": "W4BkocI0pCkp"
      },
      "execution_count": 269,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.dropna(subset=['experience'], inplace=True)\n",
        "test_data.dropna(subset=['experience'], inplace=True)"
      ],
      "metadata": {
        "id": "tRz1KEwMp78C"
      },
      "execution_count": 270,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['experience']=train_data['experience'].astype('int')\n",
        "test_data['experience']=test_data['experience'].astype('int')"
      ],
      "metadata": {
        "id": "TxGDrI5GqpZR"
      },
      "execution_count": 271,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('후')\n",
        "print(pd.isna(train_data['experience']).sum())\n",
        "print()\n",
        "print((train_data['experience'].value_counts()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9mDzalc6o7Ng",
        "outputId": "955b70c4-548b-4c67-9790-61e6bb88aa97"
      },
      "execution_count": 272,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "후\n",
            "0\n",
            "\n",
            "21    3255\n",
            "5     1403\n",
            "4     1365\n",
            "3     1306\n",
            "6     1180\n",
            "2     1080\n",
            "7     1014\n",
            "10     967\n",
            "9      962\n",
            "8      788\n",
            "15     677\n",
            "11     661\n",
            "14     578\n",
            "1      530\n",
            "16     504\n",
            "0      498\n",
            "12     486\n",
            "13     392\n",
            "17     338\n",
            "19     302\n",
            "18     278\n",
            "20     148\n",
            "Name: experience, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "experience=train_data.groupby(['experience','target'],as_index=False).agg(count=('target','count'))\n",
        "experience\n",
        "sns.barplot(x='experience',y='count',data=experience,hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "RHodhtl9wLg8",
        "outputId": "aa581d41-ef26-4759-904d-a108ab1f774f"
      },
      "execution_count": 273,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16d0b694f0>"
            ]
          },
          "metadata": {},
          "execution_count": 273
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###company_size\n",
        "결측치가 있는 데이터들은 너무 많아 제거하기에는 다소 부담이 되어 현재 직장이 없다고 가정하여 'no'으로 표시하였다. 'no'집단이 이직의사가 가장 있는 것으로 보인다."
      ],
      "metadata": {
        "id": "hLi75eAitI2H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(pd.isna(train_data['company_size']).sum())\n",
        "print()\n",
        "print(train_data['company_size'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RX2RjK1-tI-j",
        "outputId": "ffbb2718-1a9d-4a85-c165-b055f8460aa9"
      },
      "execution_count": 274,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5679\n",
            "\n",
            "50-99        3032\n",
            "100-500      2535\n",
            "10000+       1996\n",
            "10/49        1446\n",
            "1000-4999    1312\n",
            "<10          1290\n",
            "500-999       867\n",
            "5000-9999     555\n",
            "Name: company_size, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['company_size'].replace(np.nan,'no', inplace=True)\n",
        "test_data['company_size'].replace(np.nan,'no', inplace=True)"
      ],
      "metadata": {
        "id": "X-mMZmU85grb"
      },
      "execution_count": 275,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('후')\n",
        "print(pd.isna(train_data['company_size']).sum())\n",
        "print()\n",
        "print(train_data['company_size'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OATCdOxM5qbt",
        "outputId": "8b4ff850-489d-40e3-99b9-db4e153dbe75"
      },
      "execution_count": 276,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "후\n",
            "0\n",
            "\n",
            "no           5679\n",
            "50-99        3032\n",
            "100-500      2535\n",
            "10000+       1996\n",
            "10/49        1446\n",
            "1000-4999    1312\n",
            "<10          1290\n",
            "500-999       867\n",
            "5000-9999     555\n",
            "Name: company_size, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['company_size']=np.where(train_data['company_size'].isin(['10/49','<10']),'V',\n",
        "                                    np.where(train_data['company_size'].isin(['50-99','100-500']),'S',\n",
        "                                    np.where(train_data['company_size'].isin(['500-999','1000-4999']),'M',\n",
        "                                    np.where(train_data['company_size'].isin(['5000-9999','10000+']),'B',train_data['company_size']                                                   \n",
        "                                    ))))\n",
        "                                    "
      ],
      "metadata": {
        "id": "CUkbpql02-WT"
      },
      "execution_count": 277,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data['company_size']=np.where(test_data['company_size'].isin(['10/49','<10']),'V',\n",
        "                                    np.where(test_data['company_size'].isin(['50-99','100-500']),'S',\n",
        "                                    np.where(test_data['company_size'].isin(['500-999','1000-4999']),'M',\n",
        "                                    np.where(test_data['company_size'].isin(['5000-9999','10000+']),'B',test_data['company_size']                                                   \n",
        "                                    ))))"
      ],
      "metadata": {
        "id": "DMQBSGuF43w3"
      },
      "execution_count": 278,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "size=train_data.groupby(['company_size','target'],as_index=False).agg(count=('target','count'))\n",
        "size\n",
        "sns.barplot(x='company_size',y='count',data=size, hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "DBSFRXIgtJAq",
        "outputId": "43ffea77-ca7d-478e-8e01-b4336c0ce0fe"
      },
      "execution_count": 279,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16d1e39640>"
            ]
          },
          "metadata": {},
          "execution_count": 279
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##company_type\n",
        "직관적으로 회사 형태와는 관련이 없을 것 같아 바로 삭제 하였다."
      ],
      "metadata": {
        "id": "HI3nQGyJ7_Hq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_data['company_type'].value_counts())\n",
        "print(pd.isna(train_data['company_type']).sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzbZc7gRtJC2",
        "outputId": "f2c989e3-8b46-43c9-f888-b30eedfa91a6"
      },
      "execution_count": 280,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pvt Ltd                9694\n",
            "Funded Startup          988\n",
            "Public Sector           943\n",
            "Early Stage Startup     591\n",
            "NGO                     510\n",
            "Other                   121\n",
            "Name: company_type, dtype: int64\n",
            "5865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('전')\n",
        "size=train_data.groupby(['company_type','target'],as_index=False).agg(count=('target','count'))\n",
        "size\n",
        "sns.barplot(x='company_type',y='count',data=size, hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "id": "G2-8ED8utJEr",
        "outputId": "2de739e1-121e-4409-fe36-63b82f364c13"
      },
      "execution_count": 281,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "전\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16dff08520>"
            ]
          },
          "metadata": {},
          "execution_count": 281
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.drop(columns='company_type', inplace=True)\n",
        "test_data.drop(columns='company_type', inplace=True)"
      ],
      "metadata": {
        "id": "fVkR88_E96Iq"
      },
      "execution_count": 282,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###last_new_job\n",
        "결측치는 데이터 분포가 많은 '1'에 넣었다. 그 후 시각화를 해보니 분포가 그렇게 크게 바뀌지안았다. 'never => 0', '4> => 5'로 처리하였다."
      ],
      "metadata": {
        "id": "-gN1sgYl-PXM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(pd.isna(train_data['last_new_job']).sum())\n",
        "print(train_data['last_new_job'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N5PXnwPf_qCM",
        "outputId": "4ec7a4b5-888b-488c-fb78-b7780b24b491"
      },
      "execution_count": 283,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "367\n",
            "1        7891\n",
            ">4       3252\n",
            "2        2863\n",
            "never    2313\n",
            "4        1019\n",
            "3        1007\n",
            "Name: last_new_job, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('전')\n",
        "last=train_data.groupby(['last_new_job','target'],as_index=False).agg(count=('target','count'))\n",
        "last\n",
        "sns.barplot(x='last_new_job',y='count',data=last, hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "id": "T2ZHD1_8DrhU",
        "outputId": "7f50b99b-d770-4e1b-fd22-163fcd70fa4d"
      },
      "execution_count": 284,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "전\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16d5158490>"
            ]
          },
          "metadata": {},
          "execution_count": 284
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEHCAYAAABfkmooAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAb3ElEQVR4nO3df5RXdb3v8ecLwSZNfjpyjMGGDlxdKIowGifKU3JT5NjgPanpKhmVLrekMu/JE7nOUsM8t66dOlZalxsolIq/TkIcxViIV8tEIFEJ64K/YggF+aVeDgj4vn/sz+AIM+zvwHfPl5l5PdaaNd/92Z/92e9di3m5f3w/WxGBmZnZ/nSrdAFmZnboc1iYmVkuh4WZmeVyWJiZWS6HhZmZ5epe6QKKcPTRR0dtbW2lyzAz61CWLVv2ekRUt7Su0LCQ1Bv4GXASEMDlwJ+Au4Fa4GXgwojYLEnAzcA4YBtwaUT8Po3TAPxTGvbbETFzf/utra1l6dKlZT8eM7POTNIrra0r+jLUzcD8iDgBOAV4HpgCLIyIIcDCtAxwDjAk/UwCfgIgqS9wHfAR4HTgOkl9Cq7bzMyaKSwsJPUCzgCmA0TE2xGxBRgPNJ0ZzATOS5/HA7Mi8yTQW9KxwNnAgojYFBGbgQXA2KLqNjOzfRV5ZjEI2ADcJulpST+TdCTQPyLWpT6vAv3T5wHAmmbbN6a21trNzKydFHnPojswAvhKRCyWdDPvXnICICJCUlnmG5E0iezyFccdd1w5hjQz22Pnzp00Njayffv2Spdy0KqqqqipqaFHjx4lb1NkWDQCjRGxOC3fRxYWr0k6NiLWpctM69P6tcDAZtvXpLa1wCf2an90751FxDRgGkBdXZ0nvDKzsmpsbOSoo46itraW7Hmcjiki2LhxI42NjQwaNKjk7Qq7DBURrwJrJB2fmsYAK4G5QENqawDmpM9zgQnKjAK2pstVDwNnSeqTbmyfldrMzNrN9u3b6devX4cOCgBJ9OvXr81nSEV/z+IrwB2SDgdeBC4jC6h7JE0EXgEuTH0fJHtsdjXZo7OXAUTEJkk3AEtSv6kRsangus3M9tHRg6LJgRxHoWEREcuBuhZWjWmhbwCTWxlnBjCjvNWZmVmpPN2HmVmZbdmyhVtvvbXw/TzwwAOsXLmy8P1AJ53uozUjr55VyLjLbppQyLhm1jE1hcUVV1xRUv+IICLo1q1t//3+wAMPcO655zJ06NADKbNNfGZhZlZmU6ZM4YUXXmD48OFcddVVjBkzhhEjRjBs2DDmzMme6Xn55Zc5/vjjmTBhAieddBJr1qzhhhtu4Pjjj+djH/sYF198Md/73vcAeOGFFxg7diwjR47k4x//OH/84x954oknmDt3LldffTXDhw/nhRdeKPSYutSZhZlZe/jOd77DihUrWL58Obt27WLbtm307NmT119/nVGjRlFfXw/AqlWrmDlzJqNGjWLJkiXcf//9PPPMM+zcuZMRI0YwcuRIACZNmsRPf/pThgwZwuLFi7niiit45JFHqK+v59xzz+X8888v/JgcFmZmBYoIrrnmGh577DG6devG2rVree211wD40Ic+xKhRowD47W9/y/jx46mqqqKqqopPf/rTALz11ls88cQTXHDBBXvG3LFjR7sfh8PCzKxAd9xxBxs2bGDZsmX06NGD2traPd9xOPLII3O3f+edd+jduzfLly8vutT98j0LM7MyO+qoo3jzzTcB2Lp1K8cccww9evRg0aJFvPJKy7OAjx49ml/96lds376dt956i3nz5gHQs2dPBg0axL333gtkZyrPPPPMPvspmsPCzKzM+vXrx+jRoznppJNYvnw5S5cuZdiwYcyaNYsTTjihxW1OO+006uvrOfnkkznnnHMYNmwYvXr1ArKzk+nTp3PKKadw4okn7rlJftFFF3HTTTdx6qmn+ga3mVlHdOedd+b2WbFixXuWv/71r3P99dezbds2zjjjjD03uAcNGsT8+fP32X706NH+noWZWVczadIkVq5cyfbt22loaGDEiBGVLmkPh4WZ2SGilLORSvE9CzMzy+WwMDOzXA4LMzPL5bAwM7NcvsFtZnYAyj2LdamzV8+fP58rr7yS3bt384UvfIEpU6a8Z/2OHTuYMGECy5Yto1+/ftx9993U1tYedH0+szAz6yB2797N5MmTeeihh1i5ciV33XXXPt+zmD59On369GH16tVcddVVfOMb3yjLvh0WZmYdxFNPPcXgwYP58Ic/zOGHH85FF12059vcTebMmUNDQwMA559/PgsXLiR7EenBcViYmXUQa9euZeDAgXuWa2pqWLt2bat9unfvTq9evdi4ceNB79thYWZmuRwWZmYdxIABA1izZs2e5cbG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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['last_new_job'].fillna(1, inplace=True)\n",
        "test_data['last_new_job'].fillna(1, inplace=True)"
      ],
      "metadata": {
        "id": "WR7uV9lJC5P7"
      },
      "execution_count": 285,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['last_new_job']=np.where(train_data['last_new_job']=='>4',5,\n",
        "                                    np.where(train_data['last_new_job']=='never',0,train_data['last_new_job']))"
      ],
      "metadata": {
        "id": "SQA6wrYi_qEw"
      },
      "execution_count": 286,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data['last_new_job']=np.where(test_data['last_new_job']=='>4',5,\n",
        "                                    np.where(test_data['last_new_job']=='never',0,test_data['last_new_job']))"
      ],
      "metadata": {
        "id": "gNJRTq8nArg-"
      },
      "execution_count": 287,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('후')\n",
        "print(pd.isna(train_data['last_new_job']).sum())\n",
        "print()\n",
        "print(train_data['last_new_job'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "41Tvm19pArjx",
        "outputId": "504a0cb1-28a2-45e9-9487-f99c1b9d7703"
      },
      "execution_count": 288,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "후\n",
            "0\n",
            "\n",
            "1    7891\n",
            "5    3252\n",
            "2    2863\n",
            "0    2313\n",
            "4    1019\n",
            "3    1007\n",
            "1     367\n",
            "Name: last_new_job, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['last_new_job']=train_data['last_new_job'].astype('int')\n",
        "test_data['last_new_job']=test_data['last_new_job'].astype('int')"
      ],
      "metadata": {
        "id": "YkylOZIACEtC"
      },
      "execution_count": 289,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "last=train_data.groupby(['last_new_job','target'],as_index=False).agg(count=('target','count'))\n",
        "last\n",
        "sns.barplot(x='last_new_job',y='count',data=last, hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "IVlXfHrT-S_G",
        "outputId": "a9510b89-88d2-4f80-d4be-869fa76f85fc"
      },
      "execution_count": 290,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16e35f2b20>"
            ]
          },
          "metadata": {},
          "execution_count": 290
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_data[['last_new_job','target']].corr())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gmnSwPjuCqyE",
        "outputId": "1d4d6f69-ffe5-4f6b-bb14-24e30c35aff6"
      },
      "execution_count": 291,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              last_new_job    target\n",
            "last_new_job      1.000000 -0.086457\n",
            "target           -0.086457  1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###training_hours\n",
        "교육시간이 적을 수록 많은 사람들이 분포해있고 이직의사여부가 활발한 것으로 보이므로 의미있는 변수라고 판단되어진다."
      ],
      "metadata": {
        "id": "2pC5mUYGF9sp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print()\n",
        "print(pd.isna(train_data['training_hours']).sum())\n",
        "print(train_data['training_hours'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_xeMYi7EDi0u",
        "outputId": "44796506-ba13-432e-9be0-58b02bb856f5"
      },
      "execution_count": 292,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "0\n",
            "28     324\n",
            "12     286\n",
            "18     280\n",
            "22     274\n",
            "20     272\n",
            "      ... \n",
            "272      5\n",
            "294      5\n",
            "286      5\n",
            "238      4\n",
            "234      4\n",
            "Name: training_hours, Length: 241, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training=train_data.groupby(['training_hours','target'],as_index=False).agg(count=('target','count'))\n",
        "training"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "1AvlsYNHGy1D",
        "outputId": "7bd40de5-f512-470f-bd62-ac1a44134031"
      },
      "execution_count": 293,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     training_hours  target  count\n",
              "0                 1     0.0      7\n",
              "1                 1     1.0      2\n",
              "2                 2     0.0     68\n",
              "3                 2     1.0     24\n",
              "4                 3     0.0     86\n",
              "..              ...     ...    ...\n",
              "468             332     1.0      4\n",
              "469             334     0.0      8\n",
              "470             334     1.0      2\n",
              "471             336     0.0      8\n",
              "472             336     1.0      3\n",
              "\n",
              "[473 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fa1a2f64-4488-43b4-b5b8-dc5f869b0a7f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>training_hours</th>\n",
              "      <th>target</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>468</th>\n",
              "      <td>332</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>469</th>\n",
              "      <td>334</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>470</th>\n",
              "      <td>334</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>471</th>\n",
              "      <td>336</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>472</th>\n",
              "      <td>336</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>473 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa1a2f64-4488-43b4-b5b8-dc5f869b0a7f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fa1a2f64-4488-43b4-b5b8-dc5f869b0a7f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fa1a2f64-4488-43b4-b5b8-dc5f869b0a7f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 293
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig=plt.figure(figsize=(120,10))\n",
        "ax1=fig.add_subplot(1,7,1)\n",
        "ax2=fig.add_subplot(1,7,2)\n",
        "ax3=fig.add_subplot(1,7,3)\n",
        "ax4=fig.add_subplot(1,7,4)\n",
        "ax5=fig.add_subplot(1,7,5)\n",
        "ax6=fig.add_subplot(1,7,6)\n",
        "ax7=fig.add_subplot(1,7,7)\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax1)\n",
        "ax1.set_xlim([1,51])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax2)\n",
        "ax2.set_xlim([51,100])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax3)\n",
        "ax3.set_xlim([100,151])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax4)\n",
        "ax4.set_xlim([151,200])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax5)\n",
        "ax5.set_xlim([200,251])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax6)\n",
        "ax6.set_xlim([251,300])\n",
        "\n",
        "sns.barplot(x='training_hours',y='count',data=training, hue='target',ax=ax7)\n",
        "ax7.set_xlim([300,351])\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "uXx3XUmvGy3g",
        "outputId": "97ce5039-c8e0-40b5-cb80-be488f75d2ab"
      },
      "execution_count": 294,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(300.0, 351.0)"
            ]
          },
          "metadata": {},
          "execution_count": 294
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 8640x720 with 7 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lineplot(x='training_hours',y='count',data=training, hue='target')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "POTV758iGy5W",
        "outputId": "6c808bda-7217-4d50-e0ea-195f9fcac031"
      },
      "execution_count": 295,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f16dffdf5e0>"
            ]
          },
          "metadata": {},
          "execution_count": 295
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# model"
      ],
      "metadata": {
        "id": "MBOSM-4BPstd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###preprocessing"
      ],
      "metadata": {
        "id": "l03TkuDyQ6qW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "YXFjpUqTST-n"
      },
      "execution_count": 296,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['enrolled_university']=np.where(train_data['enrolled_university']=='no_enrollment',0,np.where(train_data['enrolled_university']=='Full time course',1, 2))\n",
        "\n",
        "encoder_education_level=LabelEncoder()\n",
        "encoder_education_level.fit(train_data['education_level'])\n",
        "train_data['education_level']=encoder_education_level.transform(train_data['education_level'])\n",
        "test_data['education_level']=encoder_education_level.transform(test_data['education_level'])\n",
        "\n",
        "encoder_education_major=LabelEncoder()\n",
        "encoder_education_major.fit(train_data['major_discipline'])\n",
        "train_data['major_discipline']=encoder_education_major.transform(train_data['major_discipline'])\n",
        "test_data['major_discipline']=encoder_education_major.transform(test_data['major_discipline'])\n",
        "\n",
        "encoder_education_size=LabelEncoder()\n",
        "encoder_education_size.fit(train_data['company_size'])\n",
        "train_data['company_size']=encoder_education_size.transform(train_data['company_size'])\n",
        "test_data['company_size']=encoder_education_size.transform(test_data['company_size'])"
      ],
      "metadata": {
        "id": "8-XIk014QzKk"
      },
      "execution_count": 297,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "target_data=train_data['target']\n",
        "\n",
        "train_data.drop(columns='target', inplace=True)"
      ],
      "metadata": {
        "id": "dBf2F-GiRbB2"
      },
      "execution_count": 298,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_data,val_data,train_target,val_target=train_test_split(train_data, target_data, test_size=0.2)"
      ],
      "metadata": {
        "id": "CGm46l3tReZU"
      },
      "execution_count": 299,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "##정규화\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler=StandardScaler()\n",
        "scaler.fit(train_data)\n",
        "train_data=scaler.transform(train_data)\n",
        "val_data=scaler.transform(val_data)"
      ],
      "metadata": {
        "id": "xlYT_5N9pL9z"
      },
      "execution_count": 300,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "smote=SMOTE()\n",
        "train_data, train_target=smote.fit_resample(train_data, train_target)"
      ],
      "metadata": {
        "id": "s3cqzuFyyaON"
      },
      "execution_count": 301,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 기본 모델 학습 및 성능 평가\n",
        "from pandas.io.formats.printing import format_object_attrs\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.model_selection import cross_val_score, cross_validate\n",
        "\n",
        "def model(train_data, val_data, train_target, val_target):\n",
        "\n",
        "  dt=DecisionTreeClassifier()\n",
        "  dt.fit(train_data, train_target)\n",
        "  a=dt.score(train_data,  train_target)\n",
        "  a1=dt.score(val_data,  val_target)\n",
        "  scores=cross_val_score(dt, train_data, train_target,cv=5, scoring='accuracy')\n",
        "  scores=np.round(scores,2)\n",
        "  print('dt_test성능 점수:{}, dt_val성능점수:{}, 교차검증점수:{}'.format(a,a1,scores))\n",
        "\n",
        "  rf=RandomForestClassifier(max_features='auto',n_estimators=20)\n",
        "  rf.fit(train_data,  train_target)\n",
        "  b=rf.score(train_data,  train_target)\n",
        "  b1=rf.score(val_data, val_target)\n",
        "  scores=cross_val_score(rf, train_data, train_target,cv=5, scoring='accuracy')\n",
        "  scores=np.round(scores,2)\n",
        "  print('rf성능 점수:{}, rf_val 성능점수:{}, 교차검증점수:{}'.format(b,b1,scores))\n",
        "\n",
        "  gb=GradientBoostingClassifier()\n",
        "  gb.fit(train_data,  train_target)\n",
        "  c=gb.score(train_data,  train_target)\n",
        "  c1=gb.score(val_data, val_target)\n",
        "  scores=cross_val_score(gb, train_data, train_target,cv=5, scoring='accuracy')\n",
        "  scores=np.round(scores,2)\n",
        "  print('gb성능 점수:{}, gb_val 성능점수:{}, 교차검증점수:{}'.format(c,c1,scores))\n",
        "\n",
        "  evals=[(train_data,train_target),(val_data,val_target)]\n",
        "  xgb=XGBClassifier()\n",
        "  xgb.fit(train_data,  train_target,eval_set=evals)\n",
        "  d=xgb.score(train_data,  train_target)\n",
        "  d1=xgb.score(val_data, val_target)\n",
        "  scores=cross_val_score(xgb, train_data, train_target,cv=5, scoring='accuracy')\n",
        "  scores=np.round(scores,2)\n",
        "  print('xgb성능 점수:{}, xgb_val 성능점수:{}, 교차검증점수:{}'.format(d,d1,scores))\n",
        "\n",
        "  evals=[(train_data,train_target),(val_data,val_target)]\n",
        "  lgb=LGBMClassifier(silent=1)\n",
        "  lgb.fit(train_data,  train_target,eval_set=evals)\n",
        "  e=lgb.score(train_data,  train_target)\n",
        "  e1=lgb.score(val_data, val_target)\n",
        "  scores=cross_val_score(lgb, train_data, train_target,cv=5, scoring='accuracy')\n",
        "  scores=np.round(scores,2)\n",
        "  print('lgb성능 점수:{}, lgb_val 성능점수:{}, 교차검증점수:{}'.format(e,e1,scores))\n",
        "        \n",
        "\n",
        "model(train_data, val_data,  train_target, val_target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DBiOR6hSUobo",
        "outputId": "76e37393-28e6-49d6-aab5-19cea34a8b72"
      },
      "execution_count": 302,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dt_test성능 점수:0.9961371103809609, dt_val성능점수:0.7106598984771574, 교차검증점수:[0.66 0.72 0.84 0.84 0.83]\n",
            "rf성능 점수:0.9927626320930646, rf_val 성능점수:0.7598183275447502, 교차검증점수:[0.72 0.78 0.88 0.89 0.88]\n",
            "gb성능 점수:0.8180445786342243, gb_val 성능점수:0.7809243921987711, 교차검증점수:[0.74 0.79 0.83 0.85 0.83]\n",
            "[0]\tvalidation_0-error:0.245715\tvalidation_1-error:0.224686\n",
            "[1]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[2]\tvalidation_0-error:0.234482\tvalidation_1-error:0.256479\n",
            "[3]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[4]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[5]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[6]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[7]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[8]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[9]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[10]\tvalidation_0-error:0.234704\tvalidation_1-error:0.256479\n",
            "[11]\tvalidation_0-error:0.232484\tvalidation_1-error:0.251403\n",
            "[12]\tvalidation_0-error:0.232217\tvalidation_1-error:0.251403\n",
            "[13]\tvalidation_0-error:0.232217\tvalidation_1-error:0.251403\n",
            "[14]\tvalidation_0-error:0.232217\tvalidation_1-error:0.251403\n",
            "[15]\tvalidation_0-error:0.232173\tvalidation_1-error:0.251403\n",
            "[16]\tvalidation_0-error:0.232173\tvalidation_1-error:0.251403\n",
            "[17]\tvalidation_0-error:0.23164\tvalidation_1-error:0.25167\n",
            "[18]\tvalidation_0-error:0.231862\tvalidation_1-error:0.250868\n",
            "[19]\tvalidation_0-error:0.231019\tvalidation_1-error:0.250868\n",
            "[20]\tvalidation_0-error:0.229553\tvalidation_1-error:0.247929\n",
            "[21]\tvalidation_0-error:0.229021\tvalidation_1-error:0.249532\n",
            "[22]\tvalidation_0-error:0.228843\tvalidation_1-error:0.247662\n",
            "[23]\tvalidation_0-error:0.227466\tvalidation_1-error:0.247662\n",
            "[24]\tvalidation_0-error:0.219696\tvalidation_1-error:0.239647\n",
            "[25]\tvalidation_0-error:0.21388\tvalidation_1-error:0.238846\n",
            "[26]\tvalidation_0-error:0.213081\tvalidation_1-error:0.23751\n",
            "[27]\tvalidation_0-error:0.214279\tvalidation_1-error:0.238312\n",
            "[28]\tvalidation_0-error:0.213347\tvalidation_1-error:0.236976\n",
            "[29]\tvalidation_0-error:0.212681\tvalidation_1-error:0.235907\n",
            "[30]\tvalidation_0-error:0.211482\tvalidation_1-error:0.235907\n",
            "[31]\tvalidation_0-error:0.211527\tvalidation_1-error:0.235907\n",
            "[32]\tvalidation_0-error:0.210194\tvalidation_1-error:0.235106\n",
            "[33]\tvalidation_0-error:0.210372\tvalidation_1-error:0.235106\n",
            "[34]\tvalidation_0-error:0.210283\tvalidation_1-error:0.235106\n",
            "[35]\tvalidation_0-error:0.210061\tvalidation_1-error:0.23564\n",
            "[36]\tvalidation_0-error:0.209617\tvalidation_1-error:0.234838\n",
            "[37]\tvalidation_0-error:0.209706\tvalidation_1-error:0.235106\n",
            "[38]\tvalidation_0-error:0.209972\tvalidation_1-error:0.234304\n",
            "[39]\tvalidation_0-error:0.209884\tvalidation_1-error:0.23377\n",
            "[40]\tvalidation_0-error:0.209528\tvalidation_1-error:0.234838\n",
            "[41]\tvalidation_0-error:0.209218\tvalidation_1-error:0.234304\n",
            "[42]\tvalidation_0-error:0.209173\tvalidation_1-error:0.234838\n",
            "[43]\tvalidation_0-error:0.208951\tvalidation_1-error:0.234304\n",
            "[44]\tvalidation_0-error:0.20793\tvalidation_1-error:0.234304\n",
            "[45]\tvalidation_0-error:0.207708\tvalidation_1-error:0.234304\n",
            "[46]\tvalidation_0-error:0.20722\tvalidation_1-error:0.234838\n",
            "[47]\tvalidation_0-error:0.20642\tvalidation_1-error:0.233503\n",
            "[48]\tvalidation_0-error:0.205266\tvalidation_1-error:0.2319\n",
            "[49]\tvalidation_0-error:0.205488\tvalidation_1-error:0.2319\n",
            "[50]\tvalidation_0-error:0.205\tvalidation_1-error:0.230297\n",
            "[51]\tvalidation_0-error:0.205044\tvalidation_1-error:0.230564\n",
            "[52]\tvalidation_0-error:0.204911\tvalidation_1-error:0.230029\n",
            "[53]\tvalidation_0-error:0.203801\tvalidation_1-error:0.230831\n",
            "[54]\tvalidation_0-error:0.203446\tvalidation_1-error:0.230564\n",
            "[55]\tvalidation_0-error:0.203312\tvalidation_1-error:0.229762\n",
            "[56]\tvalidation_0-error:0.202158\tvalidation_1-error:0.228694\n",
            "[57]\tvalidation_0-error:0.202424\tvalidation_1-error:0.228694\n",
            "[58]\tvalidation_0-error:0.202113\tvalidation_1-error:0.228426\n",
            "[59]\tvalidation_0-error:0.20198\tvalidation_1-error:0.228694\n",
            "[60]\tvalidation_0-error:0.202247\tvalidation_1-error:0.228961\n",
            "[61]\tvalidation_0-error:0.200826\tvalidation_1-error:0.228961\n",
            "[62]\tvalidation_0-error:0.200471\tvalidation_1-error:0.228159\n",
            "[63]\tvalidation_0-error:0.200293\tvalidation_1-error:0.229495\n",
            "[64]\tvalidation_0-error:0.199627\tvalidation_1-error:0.228961\n",
            "[65]\tvalidation_0-error:0.199316\tvalidation_1-error:0.228426\n",
            "[66]\tvalidation_0-error:0.199227\tvalidation_1-error:0.227892\n",
            "[67]\tvalidation_0-error:0.197274\tvalidation_1-error:0.227358\n",
            "[68]\tvalidation_0-error:0.196874\tvalidation_1-error:0.227358\n",
            "[69]\tvalidation_0-error:0.196741\tvalidation_1-error:0.227091\n",
            "[70]\tvalidation_0-error:0.19572\tvalidation_1-error:0.226556\n",
            "[71]\tvalidation_0-error:0.195542\tvalidation_1-error:0.227091\n",
            "[72]\tvalidation_0-error:0.195009\tvalidation_1-error:0.226556\n",
            "[73]\tvalidation_0-error:0.19421\tvalidation_1-error:0.226556\n",
            "[74]\tvalidation_0-error:0.194255\tvalidation_1-error:0.227091\n",
            "[75]\tvalidation_0-error:0.193944\tvalidation_1-error:0.227091\n",
            "[76]\tvalidation_0-error:0.193366\tvalidation_1-error:0.227091\n",
            "[77]\tvalidation_0-error:0.192034\tvalidation_1-error:0.226022\n",
            "[78]\tvalidation_0-error:0.19199\tvalidation_1-error:0.226022\n",
            "[79]\tvalidation_0-error:0.191502\tvalidation_1-error:0.225755\n",
            "[80]\tvalidation_0-error:0.191013\tvalidation_1-error:0.226022\n",
            "[81]\tvalidation_0-error:0.19017\tvalidation_1-error:0.226022\n",
            "[82]\tvalidation_0-error:0.18977\tvalidation_1-error:0.225755\n",
            "[83]\tvalidation_0-error:0.18977\tvalidation_1-error:0.225755\n",
            "[84]\tvalidation_0-error:0.18937\tvalidation_1-error:0.22522\n",
            "[85]\tvalidation_0-error:0.188616\tvalidation_1-error:0.224686\n",
            "[86]\tvalidation_0-error:0.187239\tvalidation_1-error:0.224152\n",
            "[87]\tvalidation_0-error:0.187017\tvalidation_1-error:0.222549\n",
            "[88]\tvalidation_0-error:0.186884\tvalidation_1-error:0.223083\n",
            "[89]\tvalidation_0-error:0.186706\tvalidation_1-error:0.222549\n",
            "[90]\tvalidation_0-error:0.186396\tvalidation_1-error:0.223083\n",
            "[91]\tvalidation_0-error:0.185863\tvalidation_1-error:0.22335\n",
            "[92]\tvalidation_0-error:0.185863\tvalidation_1-error:0.222816\n",
            "[93]\tvalidation_0-error:0.185685\tvalidation_1-error:0.222816\n",
            "[94]\tvalidation_0-error:0.184797\tvalidation_1-error:0.222282\n",
            "[95]\tvalidation_0-error:0.184708\tvalidation_1-error:0.222549\n",
            "[96]\tvalidation_0-error:0.184531\tvalidation_1-error:0.222282\n",
            "[97]\tvalidation_0-error:0.183909\tvalidation_1-error:0.221747\n",
            "[98]\tvalidation_0-error:0.183643\tvalidation_1-error:0.22148\n",
            "[99]\tvalidation_0-error:0.18382\tvalidation_1-error:0.22148\n",
            "xgb성능 점수:0.8161797353698605, xgb_val 성능점수:0.7785199038204649, 교차검증점수:[0.75 0.79 0.83 0.85 0.83]\n",
            "[1]\ttraining's binary_logloss: 0.65507\tvalid_1's binary_logloss: 0.659293\n",
            "[2]\ttraining's binary_logloss: 0.624209\tvalid_1's binary_logloss: 0.632274\n",
            "[3]\ttraining's binary_logloss: 0.598232\tvalid_1's binary_logloss: 0.609902\n",
            "[4]\ttraining's binary_logloss: 0.577841\tvalid_1's binary_logloss: 0.592323\n",
            "[5]\ttraining's binary_logloss: 0.559107\tvalid_1's binary_logloss: 0.576517\n",
            "[6]\ttraining's binary_logloss: 0.544299\tvalid_1's binary_logloss: 0.564061\n",
            "[7]\ttraining's binary_logloss: 0.530373\tvalid_1's binary_logloss: 0.553315\n",
            "[8]\ttraining's binary_logloss: 0.518042\tvalid_1's binary_logloss: 0.543386\n",
            "[9]\ttraining's binary_logloss: 0.507633\tvalid_1's binary_logloss: 0.535821\n",
            "[10]\ttraining's binary_logloss: 0.498746\tvalid_1's binary_logloss: 0.529066\n",
            "[11]\ttraining's binary_logloss: 0.490845\tvalid_1's binary_logloss: 0.52314\n",
            "[12]\ttraining's binary_logloss: 0.48397\tvalid_1's binary_logloss: 0.518391\n",
            "[13]\ttraining's binary_logloss: 0.477679\tvalid_1's binary_logloss: 0.51425\n",
            "[14]\ttraining's binary_logloss: 0.472266\tvalid_1's binary_logloss: 0.51046\n",
            "[15]\ttraining's binary_logloss: 0.467516\tvalid_1's binary_logloss: 0.507208\n",
            "[16]\ttraining's binary_logloss: 0.462924\tvalid_1's binary_logloss: 0.504448\n",
            "[17]\ttraining's binary_logloss: 0.459747\tvalid_1's binary_logloss: 0.502472\n",
            "[18]\ttraining's binary_logloss: 0.454638\tvalid_1's binary_logloss: 0.499849\n",
            "[19]\ttraining's binary_logloss: 0.450563\tvalid_1's binary_logloss: 0.497474\n",
            "[20]\ttraining's binary_logloss: 0.447074\tvalid_1's binary_logloss: 0.495621\n",
            "[21]\ttraining's binary_logloss: 0.441873\tvalid_1's binary_logloss: 0.492541\n",
            "[22]\ttraining's binary_logloss: 0.438838\tvalid_1's binary_logloss: 0.491147\n",
            "[23]\ttraining's binary_logloss: 0.434579\tvalid_1's binary_logloss: 0.488589\n",
            "[24]\ttraining's binary_logloss: 0.432196\tvalid_1's binary_logloss: 0.48722\n",
            "[25]\ttraining's binary_logloss: 0.425934\tvalid_1's binary_logloss: 0.48425\n",
            "[26]\ttraining's binary_logloss: 0.423206\tvalid_1's binary_logloss: 0.483152\n",
            "[27]\ttraining's binary_logloss: 0.417536\tvalid_1's binary_logloss: 0.480667\n",
            "[28]\ttraining's binary_logloss: 0.410975\tvalid_1's binary_logloss: 0.477647\n",
            "[29]\ttraining's binary_logloss: 0.408374\tvalid_1's binary_logloss: 0.476458\n",
            "[30]\ttraining's binary_logloss: 0.401222\tvalid_1's binary_logloss: 0.473106\n",
            "[31]\ttraining's binary_logloss: 0.395541\tvalid_1's binary_logloss: 0.470432\n",
            "[32]\ttraining's binary_logloss: 0.393468\tvalid_1's binary_logloss: 0.469807\n",
            "[33]\ttraining's binary_logloss: 0.39184\tvalid_1's binary_logloss: 0.468945\n",
            "[34]\ttraining's binary_logloss: 0.387582\tvalid_1's binary_logloss: 0.467248\n",
            "[35]\ttraining's binary_logloss: 0.386316\tvalid_1's binary_logloss: 0.466905\n",
            "[36]\ttraining's binary_logloss: 0.383872\tvalid_1's binary_logloss: 0.465952\n",
            "[37]\ttraining's binary_logloss: 0.382536\tvalid_1's binary_logloss: 0.465675\n",
            "[38]\ttraining's binary_logloss: 0.379464\tvalid_1's binary_logloss: 0.464304\n",
            "[39]\ttraining's binary_logloss: 0.377755\tvalid_1's binary_logloss: 0.463654\n",
            "[40]\ttraining's binary_logloss: 0.376388\tvalid_1's binary_logloss: 0.462958\n",
            "[41]\ttraining's binary_logloss: 0.374956\tvalid_1's binary_logloss: 0.462392\n",
            "[42]\ttraining's binary_logloss: 0.372854\tvalid_1's binary_logloss: 0.461723\n",
            "[43]\ttraining's binary_logloss: 0.370597\tvalid_1's binary_logloss: 0.460663\n",
            "[44]\ttraining's binary_logloss: 0.368821\tvalid_1's binary_logloss: 0.460148\n",
            "[45]\ttraining's binary_logloss: 0.366825\tvalid_1's binary_logloss: 0.459654\n",
            "[46]\ttraining's binary_logloss: 0.364178\tvalid_1's binary_logloss: 0.458447\n",
            "[47]\ttraining's binary_logloss: 0.363309\tvalid_1's binary_logloss: 0.458349\n",
            "[48]\ttraining's binary_logloss: 0.361725\tvalid_1's binary_logloss: 0.457819\n",
            "[49]\ttraining's binary_logloss: 0.360529\tvalid_1's binary_logloss: 0.457511\n",
            "[50]\ttraining's binary_logloss: 0.359377\tvalid_1's binary_logloss: 0.457166\n",
            "[51]\ttraining's binary_logloss: 0.35851\tvalid_1's binary_logloss: 0.457282\n",
            "[52]\ttraining's binary_logloss: 0.356948\tvalid_1's binary_logloss: 0.456845\n",
            "[53]\ttraining's binary_logloss: 0.35626\tvalid_1's binary_logloss: 0.456738\n",
            "[54]\ttraining's binary_logloss: 0.355427\tvalid_1's binary_logloss: 0.456516\n",
            "[55]\ttraining's binary_logloss: 0.354697\tvalid_1's binary_logloss: 0.456378\n",
            "[56]\ttraining's binary_logloss: 0.353609\tvalid_1's binary_logloss: 0.456129\n",
            "[57]\ttraining's binary_logloss: 0.352985\tvalid_1's binary_logloss: 0.456237\n",
            "[58]\ttraining's binary_logloss: 0.351586\tvalid_1's binary_logloss: 0.455683\n",
            "[59]\ttraining's binary_logloss: 0.350898\tvalid_1's binary_logloss: 0.455421\n",
            "[60]\ttraining's binary_logloss: 0.348821\tvalid_1's binary_logloss: 0.454752\n",
            "[61]\ttraining's binary_logloss: 0.347781\tvalid_1's binary_logloss: 0.454591\n",
            "[62]\ttraining's binary_logloss: 0.346659\tvalid_1's binary_logloss: 0.454212\n",
            "[63]\ttraining's binary_logloss: 0.345609\tvalid_1's binary_logloss: 0.453796\n",
            "[64]\ttraining's binary_logloss: 0.345075\tvalid_1's binary_logloss: 0.453795\n",
            "[65]\ttraining's binary_logloss: 0.344486\tvalid_1's binary_logloss: 0.453769\n",
            "[66]\ttraining's binary_logloss: 0.343506\tvalid_1's binary_logloss: 0.453579\n",
            "[67]\ttraining's binary_logloss: 0.342545\tvalid_1's binary_logloss: 0.453419\n",
            "[68]\ttraining's binary_logloss: 0.341762\tvalid_1's binary_logloss: 0.453048\n",
            "[69]\ttraining's binary_logloss: 0.340887\tvalid_1's binary_logloss: 0.452841\n",
            "[70]\ttraining's binary_logloss: 0.340181\tvalid_1's binary_logloss: 0.45275\n",
            "[71]\ttraining's binary_logloss: 0.33971\tvalid_1's binary_logloss: 0.452777\n",
            "[72]\ttraining's binary_logloss: 0.338914\tvalid_1's binary_logloss: 0.452694\n",
            "[73]\ttraining's binary_logloss: 0.338355\tvalid_1's binary_logloss: 0.45288\n",
            "[74]\ttraining's binary_logloss: 0.337371\tvalid_1's binary_logloss: 0.452826\n",
            "[75]\ttraining's binary_logloss: 0.336527\tvalid_1's binary_logloss: 0.452548\n",
            "[76]\ttraining's binary_logloss: 0.336007\tvalid_1's binary_logloss: 0.452383\n",
            "[77]\ttraining's binary_logloss: 0.334535\tvalid_1's binary_logloss: 0.452196\n",
            "[78]\ttraining's binary_logloss: 0.334057\tvalid_1's binary_logloss: 0.452241\n",
            "[79]\ttraining's binary_logloss: 0.333248\tvalid_1's binary_logloss: 0.452108\n",
            "[80]\ttraining's binary_logloss: 0.332871\tvalid_1's binary_logloss: 0.452104\n",
            "[81]\ttraining's binary_logloss: 0.332376\tvalid_1's binary_logloss: 0.452161\n",
            "[82]\ttraining's binary_logloss: 0.331603\tvalid_1's binary_logloss: 0.452107\n",
            "[83]\ttraining's binary_logloss: 0.330597\tvalid_1's binary_logloss: 0.451811\n",
            "[84]\ttraining's binary_logloss: 0.329806\tvalid_1's binary_logloss: 0.451848\n",
            "[85]\ttraining's binary_logloss: 0.329191\tvalid_1's binary_logloss: 0.45196\n",
            "[86]\ttraining's binary_logloss: 0.328645\tvalid_1's binary_logloss: 0.451948\n",
            "[87]\ttraining's binary_logloss: 0.328007\tvalid_1's binary_logloss: 0.451766\n",
            "[88]\ttraining's binary_logloss: 0.327216\tvalid_1's binary_logloss: 0.45172\n",
            "[89]\ttraining's binary_logloss: 0.326678\tvalid_1's binary_logloss: 0.451526\n",
            "[90]\ttraining's binary_logloss: 0.326217\tvalid_1's binary_logloss: 0.45144\n",
            "[91]\ttraining's binary_logloss: 0.325716\tvalid_1's binary_logloss: 0.451419\n",
            "[92]\ttraining's binary_logloss: 0.325182\tvalid_1's binary_logloss: 0.451385\n",
            "[93]\ttraining's binary_logloss: 0.324709\tvalid_1's binary_logloss: 0.451691\n",
            "[94]\ttraining's binary_logloss: 0.324277\tvalid_1's binary_logloss: 0.451699\n",
            "[95]\ttraining's binary_logloss: 0.323541\tvalid_1's binary_logloss: 0.45149\n",
            "[96]\ttraining's binary_logloss: 0.322242\tvalid_1's binary_logloss: 0.451214\n",
            "[97]\ttraining's binary_logloss: 0.321695\tvalid_1's binary_logloss: 0.45138\n",
            "[98]\ttraining's binary_logloss: 0.321084\tvalid_1's binary_logloss: 0.451374\n",
            "[99]\ttraining's binary_logloss: 0.32042\tvalid_1's binary_logloss: 0.451346\n",
            "[100]\ttraining's binary_logloss: 0.320018\tvalid_1's binary_logloss: 0.451394\n",
            "lgb성능 점수:0.8594707397211615, lgb_val 성능점수:0.7865348650814854, 교차검증점수:[0.68 0.79 0.88 0.89 0.88]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#하이퍼파라미터 수정"
      ],
      "metadata": {
        "id": "T5NMWYLf7Sy-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import uniform, randint\n",
        "from sklearn.model_selection import RandomizedSearchCV"
      ],
      "metadata": {
        "id": "GucLYCCrBv0h"
      },
      "execution_count": 303,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###결정트리"
      ],
      "metadata": {
        "id": "jEQGEJduGjpW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dt_param_grid={'min_samples_split':range(1,15,1),\n",
        "            'min_samples_leaf':range(1,15,1),\n",
        "            'max_depth':range(1,15,1),\n",
        "            'max_leaf_nodes':range(1,15,1)}\n",
        "\n",
        "dt=DecisionTreeClassifier()\n",
        "gs_dt=RandomizedSearchCV(dt,dt_param_grid,n_jobs=-1, cv=5, refit=True)\n",
        "gs_dt.fit(train_data,train_target)\n",
        "\n",
        "dt=gs_dt.best_estimator_\n",
        "dt.predict(val_data)\n",
        "\n",
        "print('gs_dt.best_params_:', gs_dt.best_params_)\n",
        "print('gs_dt.best_score_:', gs_dt.best_score_)"
      ],
      "metadata": {
        "id": "sh-IOIn96MMd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a015923-8edd-4521-a4fa-8302b740ddad"
      },
      "execution_count": 304,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gs_dt.best_params_: {'min_samples_split': 13, 'min_samples_leaf': 3, 'max_leaf_nodes': 14, 'max_depth': 13}\n",
            "gs_dt.best_score_: 0.7803498382495866\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dt 성능평가\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score\n",
        "from sklearn.metrics import precision_recall_curve\n",
        "from sklearn.metrics import f1_score, roc_curve, roc_auc_score\n",
        "\n",
        "pred=dt.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  global f1_score\n",
        "  f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc커브 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_dt, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=dt.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3Mp5DqTWuthA",
        "outputId": "363ad30a-1927-47b2-c3bc-e36585cd1c79"
      },
      "execution_count": 305,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2084  734]\n",
            " [ 207  718]]\n",
            "정확도:0.75\n",
            "정밀도:0.49\n",
            "재현율:0.78\n",
            "f1:0.6\n",
            "roc_score:0.76\n",
            "[[2084  734]\n",
            " [ 207  718]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAECCAYAAADXWsr9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAFf0lEQVR4nO3bsYpedR7G8ee3CV5A2FQqi4UIIV0GryFWtqYWUnkB3ohNimCnbBOwEGxtLJxSWYQgWYyNCbkAEf7bpMjKwryTPe+ccZ7PpzuH4fDAmS/nvMw7s9YKcLX9be8BwPEJHQoIHQoIHQoIHQoIHQoI/Rxm5u7M/DQzj2fm0733cLiZeTgzv83MD3tv2YPQDzQz15J8luSDJLeS3JuZW/uu4hw+T3J37xF7Efrh3k/yeK3181rr9yRfJvlw500caK31bZIXe+/Yi9AP92aSX145fvryHFx6QocCQj/cr0nefuX4rZfn4NIT+uG+T/LuzLwzM28k+SjJVztvgoMI/UBrrT+SfJLkmyT/SvLPtdaP+67iUDPzRZLvkrw3M09n5uO9N12k8W+qcPV5okMBoUMBoUMBoUMBoUMBoZ/TzNzfewOvr/X+Cf38Kn9RrpDK+yd0KHCUL8zMjG/h/IXduXNn7wlH8+zZs9y8eXPvGUfz5MmTPH/+fP58/voeY7jcTk9P957Aazo5Ofmf5726QwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQwGhQ4GDQp+ZuzPz08w8nplPjz0K2NaZoc/MtSSfJfkgya0k92bm1rGHAds55In+fpLHa62f11q/J/kyyYfHnQVs6ZDQ30zyyyvHT1+eA/4irm91oZm5n+T+VtcDtnNI6L8mefuV47denvsva60HSR4kycysTdYBmzjk1f37JO/OzDsz80aSj5J8ddxZwJbOfKKvtf6YmU+SfJPkWpKHa60fj74M2MxBn9HXWl8n+frIW4Aj8c04KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KCB0KHD9GBe9fft2Hj16dIxLcwFmZu8JbMwTHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQoIHQqcGfrMPJyZ32bmh4sYBGzvkCf650nuHnkHcERnhr7W+jbJiwvYAhyJz+hQYLPQZ+b+zJzOzOmLF14A4DLZLPS11oO11sla6+TGjRtbXRbYgFd3KHDIn9e+SPJdkvdm5unMfHz8WcCWrp/1A2utexcxBDger+5QQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQQOhQYNZa21905lmSf29+4cvh70me7z2C13bV798/1lo3/3zyKKFfZTNzutY62XsHr6f1/nl1hwJChwJCP78Hew/g/1J5/3xGhwKe6FBA6FBA6FBA6FBA6FDgPxLopBMUJfA1AAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###랜덤포레스트"
      ],
      "metadata": {
        "id": "-3FCAr8fiRrP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rf_param_grid={'min_samples_split':range(1,20,1),\n",
        "            'min_samples_leaf':range(1,20,1),\n",
        "            'max_depth':range(1,20,1),\n",
        "            'max_leaf_nodes':range(1,20,1),\n",
        "            'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),\n",
        "            'criterion':['entropy','gini'],\n",
        "            }\n",
        "\n",
        "rf=DecisionTreeClassifier(max_features='sqrt')\n",
        "gs_rf=RandomizedSearchCV(rf,rf_param_grid, n_jobs=-1, cv=5, refit=True)\n",
        "gs_rf.fit(train_data,train_target)\n",
        "\n",
        "rf=gs_rf.best_estimator_\n",
        "rf.predict(val_data)\n",
        "\n",
        "print('gs_rf.best_params_:', gs_rf.best_params_)\n",
        "print('gs_rf.best_score_:', gs_rf.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-cJWosV4eDg6",
        "outputId": "5508a9c6-5a57-4b2c-b073-6d1e412b733e"
      },
      "execution_count": 306,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gs_rf.best_params_: {'min_samples_split': 3, 'min_samples_leaf': 10, 'min_impurity_decrease': 0.0007000000000000001, 'max_leaf_nodes': 19, 'max_depth': 14, 'criterion': 'entropy'}\n",
            "gs_rf.best_score_: 0.7492704474799069\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=rf.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  # global f1_score\n",
        "  # f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc_curve 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_rf, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=rf.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ajZW9TLp0zOD",
        "outputId": "cb099bc7-433d-4e46-98c0-f47ce521a18f"
      },
      "execution_count": 307,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2222  596]\n",
            " [ 266  659]]\n",
            "정확도:0.77\n",
            "정밀도:0.53\n",
            "재현율:0.71\n",
            "f1:0.6\n",
            "roc_score:0.75\n",
            "[[2222  596]\n",
            " [ 266  659]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###그레디언트부스팅"
      ],
      "metadata": {
        "id": "fJ7XIRb8V8V5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gb_param_grid={'min_samples_split':range(1,20,1),\n",
        "               'min_samples_leaf':range(1,20,1),\n",
        "               'max_depth':range(1,20,1),\n",
        "               'max_leaf_nodes':range(1,20,1),\n",
        "               'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),\n",
        "               'n_estimators':range(50,201,50),\n",
        "               'learning_rate':np.arange(0.1,1,0.05)      \n",
        "                }\n",
        "\n",
        "gb=GradientBoostingClassifier()\n",
        "gs_gb=RandomizedSearchCV(gb,gb_param_grid, n_jobs=-1, cv=5, refit=True)\n",
        "gs_gb.fit(train_data,train_target)\n",
        "\n",
        "gb=gs_gb.best_estimator_\n",
        "gb.predict(val_data)\n",
        "\n",
        "print('gs_gb.best_params_:', gs_gb.best_params_)\n",
        "print('gs_gb.best_score_:', gs_gb.best_score_)"
      ],
      "metadata": {
        "id": "x6RqAzyw9BIq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad280f9a-6ccd-485d-82f7-17b594945f47"
      },
      "execution_count": 308,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gs_gb.best_params_: {'n_estimators': 50, 'min_samples_split': 12, 'min_samples_leaf': 15, 'min_impurity_decrease': 0.0007000000000000001, 'max_leaf_nodes': 13, 'max_depth': 6, 'learning_rate': 0.30000000000000004}\n",
            "gs_gb.best_score_: 0.8213824189818693\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=gb.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  # global f1_score\n",
        "  # f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc커브 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_gb, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=gb.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dMpFMac0XDPR",
        "outputId": "fb3e6a21-0cf3-4941-9e26-28921a4edd60"
      },
      "execution_count": 309,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2329  489]\n",
            " [ 309  616]]\n",
            "정확도:0.79\n",
            "정밀도:0.56\n",
            "재현율:0.67\n",
            "f1:0.6\n",
            "roc_score:0.75\n",
            "[[2329  489]\n",
            " [ 309  616]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###XGB\n",
        "\n",
        "-learning_rate을 낮추고 n_estimators을 높이자\n",
        "-max_depth값을 낮추자\n",
        "-min_child_weight값을 높인다.\n",
        "-gamma 값을 높인다.\n",
        "-sub_sample 조절\n",
        "-colsample_bytree 조절\n"
      ],
      "metadata": {
        "id": "a0t6-dhrXCm8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "evals=[(train_data,train_target),(val_data,val_target)]\n",
        "xgb_param_grid={'min_samples_split':range(1,20,1),\n",
        "               'min_samples_leaf':range(1,10,1),\n",
        "               'max_depth':range(1,20,1),\n",
        "               'max_leaf_nodes':range(1,20,1),\n",
        "               'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),\n",
        "               'n_estimators':range(50,250,50),\n",
        "               'learning_rate':np.arange(0.01,1,0.01),\n",
        "               'eval_metrics':['error','logloss','auc'],\n",
        "               'min_child_weight':range(1,20,1),\n",
        "               'max_features':['sqrt','auto','None'],\n",
        "               'gamma':range(1,10,1)                  \n",
        "                }\n",
        "\n",
        "xgb=XGBClassifier()\n",
        "gs_xgb=RandomizedSearchCV(xgb,xgb_param_grid, n_jobs=-1, cv=5, refit=True)\n",
        "gs_xgb.fit(train_data,train_target,eval_set=evals,early_stopping_rounds=150)\n",
        "\n",
        "xgb=gs_xgb.best_estimator_\n",
        "xgb.predict(val_data)\n",
        "\n",
        "print('gs_xgb.best_params_:', gs_xgb.best_params_)\n",
        "print('gs_xgb.best_score_:', gs_xgb.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UjkbPM_4XCuC",
        "outputId": "5b2b7210-9a03-47b9-d412-17296c38ae61"
      },
      "execution_count": 310,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\tvalidation_0-error:0.180091\tvalidation_1-error:0.224686\n",
            "Multiple eval metrics have been passed: 'validation_1-error' will be used for early stopping.\n",
            "\n",
            "Will train until validation_1-error hasn't improved in 150 rounds.\n",
            "[1]\tvalidation_0-error:0.177116\tvalidation_1-error:0.220946\n",
            "[2]\tvalidation_0-error:0.177338\tvalidation_1-error:0.223617\n",
            "[3]\tvalidation_0-error:0.175739\tvalidation_1-error:0.222549\n",
            "[4]\tvalidation_0-error:0.177249\tvalidation_1-error:0.223885\n",
            "[5]\tvalidation_0-error:0.174896\tvalidation_1-error:0.223083\n",
            "[6]\tvalidation_0-error:0.170855\tvalidation_1-error:0.223885\n",
            "[7]\tvalidation_0-error:0.172809\tvalidation_1-error:0.222816\n",
            "[8]\tvalidation_0-error:0.170722\tvalidation_1-error:0.223083\n",
            "[9]\tvalidation_0-error:0.171255\tvalidation_1-error:0.22335\n",
            "[10]\tvalidation_0-error:0.1705\tvalidation_1-error:0.224686\n",
            "[11]\tvalidation_0-error:0.169878\tvalidation_1-error:0.224686\n",
            "[12]\tvalidation_0-error:0.170367\tvalidation_1-error:0.224419\n",
            "[13]\tvalidation_0-error:0.169523\tvalidation_1-error:0.223885\n",
            "[14]\tvalidation_0-error:0.168857\tvalidation_1-error:0.22335\n",
            "[15]\tvalidation_0-error:0.169834\tvalidation_1-error:0.222816\n",
            "[16]\tvalidation_0-error:0.167836\tvalidation_1-error:0.222816\n",
            "[17]\tvalidation_0-error:0.16828\tvalidation_1-error:0.222282\n",
            "[18]\tvalidation_0-error:0.168058\tvalidation_1-error:0.223617\n",
            "[19]\tvalidation_0-error:0.167658\tvalidation_1-error:0.223083\n",
            "[20]\tvalidation_0-error:0.167791\tvalidation_1-error:0.222549\n",
            "[21]\tvalidation_0-error:0.167614\tvalidation_1-error:0.222282\n",
            "[22]\tvalidation_0-error:0.167525\tvalidation_1-error:0.221213\n",
            "[23]\tvalidation_0-error:0.167037\tvalidation_1-error:0.222014\n",
            "[24]\tvalidation_0-error:0.166815\tvalidation_1-error:0.222282\n",
            "[25]\tvalidation_0-error:0.16677\tvalidation_1-error:0.22148\n",
            "[26]\tvalidation_0-error:0.165882\tvalidation_1-error:0.222014\n",
            "[27]\tvalidation_0-error:0.165527\tvalidation_1-error:0.22148\n",
            "[28]\tvalidation_0-error:0.164817\tvalidation_1-error:0.221747\n",
            "[29]\tvalidation_0-error:0.164284\tvalidation_1-error:0.221213\n",
            "[30]\tvalidation_0-error:0.163129\tvalidation_1-error:0.220946\n",
            "[31]\tvalidation_0-error:0.162819\tvalidation_1-error:0.220411\n",
            "[32]\tvalidation_0-error:0.162419\tvalidation_1-error:0.21961\n",
            "[33]\tvalidation_0-error:0.162197\tvalidation_1-error:0.218808\n",
            "[34]\tvalidation_0-error:0.161664\tvalidation_1-error:0.218541\n",
            "[35]\tvalidation_0-error:0.161398\tvalidation_1-error:0.21774\n",
            "[36]\tvalidation_0-error:0.161176\tvalidation_1-error:0.217473\n",
            "[37]\tvalidation_0-error:0.161309\tvalidation_1-error:0.217473\n",
            "[38]\tvalidation_0-error:0.160821\tvalidation_1-error:0.217473\n",
            "[39]\tvalidation_0-error:0.160332\tvalidation_1-error:0.216938\n",
            "[40]\tvalidation_0-error:0.159267\tvalidation_1-error:0.217205\n",
            "[41]\tvalidation_0-error:0.158689\tvalidation_1-error:0.218274\n",
            "[42]\tvalidation_0-error:0.157846\tvalidation_1-error:0.217473\n",
            "[43]\tvalidation_0-error:0.156913\tvalidation_1-error:0.216938\n",
            "[44]\tvalidation_0-error:0.156958\tvalidation_1-error:0.216938\n",
            "[45]\tvalidation_0-error:0.156824\tvalidation_1-error:0.216671\n",
            "[46]\tvalidation_0-error:0.156114\tvalidation_1-error:0.216671\n",
            "[47]\tvalidation_0-error:0.156114\tvalidation_1-error:0.21587\n",
            "[48]\tvalidation_0-error:0.154738\tvalidation_1-error:0.216671\n",
            "[49]\tvalidation_0-error:0.153628\tvalidation_1-error:0.216671\n",
            "[50]\tvalidation_0-error:0.153006\tvalidation_1-error:0.216671\n",
            "[51]\tvalidation_0-error:0.152118\tvalidation_1-error:0.216404\n",
            "[52]\tvalidation_0-error:0.151763\tvalidation_1-error:0.216671\n",
            "[53]\tvalidation_0-error:0.151141\tvalidation_1-error:0.216404\n",
            "[54]\tvalidation_0-error:0.149543\tvalidation_1-error:0.216404\n",
            "[55]\tvalidation_0-error:0.149631\tvalidation_1-error:0.216137\n",
            "[56]\tvalidation_0-error:0.149054\tvalidation_1-error:0.216137\n",
            "[57]\tvalidation_0-error:0.149232\tvalidation_1-error:0.216404\n",
            "[58]\tvalidation_0-error:0.149276\tvalidation_1-error:0.216671\n",
            "[59]\tvalidation_0-error:0.148743\tvalidation_1-error:0.216671\n",
            "[60]\tvalidation_0-error:0.148699\tvalidation_1-error:0.216938\n",
            "[61]\tvalidation_0-error:0.148299\tvalidation_1-error:0.216938\n",
            "[62]\tvalidation_0-error:0.148255\tvalidation_1-error:0.217205\n",
            "[63]\tvalidation_0-error:0.1479\tvalidation_1-error:0.217473\n",
            "[64]\tvalidation_0-error:0.147855\tvalidation_1-error:0.217473\n",
            "[65]\tvalidation_0-error:0.147456\tvalidation_1-error:0.217473\n",
            "[66]\tvalidation_0-error:0.147012\tvalidation_1-error:0.218808\n",
            "[67]\tvalidation_0-error:0.146879\tvalidation_1-error:0.218007\n",
            "[68]\tvalidation_0-error:0.146657\tvalidation_1-error:0.218274\n",
            "[69]\tvalidation_0-error:0.146435\tvalidation_1-error:0.218541\n",
            "[70]\tvalidation_0-error:0.145724\tvalidation_1-error:0.21774\n",
            "[71]\tvalidation_0-error:0.145191\tvalidation_1-error:0.217205\n",
            "[72]\tvalidation_0-error:0.145058\tvalidation_1-error:0.216938\n",
            "[73]\tvalidation_0-error:0.144392\tvalidation_1-error:0.217205\n",
            "[74]\tvalidation_0-error:0.144392\tvalidation_1-error:0.217205\n",
            "[75]\tvalidation_0-error:0.144126\tvalidation_1-error:0.217205\n",
            "[76]\tvalidation_0-error:0.144126\tvalidation_1-error:0.216671\n",
            "[77]\tvalidation_0-error:0.144215\tvalidation_1-error:0.216137\n",
            "[78]\tvalidation_0-error:0.143948\tvalidation_1-error:0.216137\n",
            "[79]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[80]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[81]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[82]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[83]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[84]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[85]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[86]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[87]\tvalidation_0-error:0.143593\tvalidation_1-error:0.215602\n",
            "[88]\tvalidation_0-error:0.143593\tvalidation_1-error:0.215602\n",
            "[89]\tvalidation_0-error:0.143549\tvalidation_1-error:0.215602\n",
            "[90]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[91]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[92]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[93]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[94]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[95]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[96]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[97]\tvalidation_0-error:0.143593\tvalidation_1-error:0.21587\n",
            "[98]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[99]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[100]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[101]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[102]\tvalidation_0-error:0.143549\tvalidation_1-error:0.21587\n",
            "[103]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[104]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[105]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[106]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[107]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[108]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[109]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[110]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[111]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[112]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[113]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[114]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[115]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[116]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[117]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[118]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[119]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[120]\tvalidation_0-error:0.143682\tvalidation_1-error:0.216137\n",
            "[121]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[122]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[123]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[124]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[125]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[126]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[127]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[128]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[129]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[130]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[131]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[132]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[133]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[134]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[135]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[136]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[137]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[138]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[139]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[140]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[141]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[142]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[143]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[144]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[145]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[146]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[147]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[148]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "[149]\tvalidation_0-error:0.143637\tvalidation_1-error:0.216137\n",
            "gs_xgb.best_params_: {'n_estimators': 150, 'min_samples_split': 3, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.00030000000000000003, 'min_child_weight': 6, 'max_leaf_nodes': 3, 'max_features': 'auto', 'max_depth': 18, 'learning_rate': 0.08, 'gamma': 8, 'eval_metrics': 'error'}\n",
            "gs_xgb.best_score_: 0.8327474209630902\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=xgb.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  # global f1_score\n",
        "  # f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc커브 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_xgb, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=xgb.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SDw05s0C06mm",
        "outputId": "1bdbb31a-2f1b-41f0-efd9-7d5d54778ac5"
      },
      "execution_count": 311,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2321  497]\n",
            " [ 310  615]]\n",
            "정확도:0.78\n",
            "정밀도:0.55\n",
            "재현율:0.66\n",
            "f1:0.6\n",
            "roc_score:0.74\n",
            "[[2321  497]\n",
            " [ 310  615]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#LGB"
      ],
      "metadata": {
        "id": "hvmuFx7fiQKc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "evals=[(train_data,train_target),(val_data,val_target)]\n",
        "lgb_param_grid={'min_samples_split':range(1,20,1),\n",
        "               'min_samples_leaf':range(1,10,1),\n",
        "               'max_depth':range(1,20,1),\n",
        "               'num_leaves':range(31,100,1),\n",
        "               'max_leaf_nodes':range(1,20,1),\n",
        "               'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),\n",
        "               'n_estimators':range(50,250,50),\n",
        "               'learning_rate':np.arange(0.01,1,0.01),\n",
        "               'eval_metrics':['error','logloss','auc'],\n",
        "               'min_child_weight':range(1,20,1),\n",
        "               'max_features':['sqrt','auto','None'],\n",
        "               'gamma':range(1,10,1),\n",
        "               'min_child_sample':range(1,20,1)                  \n",
        "                }\n",
        "\n",
        "lgb=LGBMClassifier()\n",
        "gs_lgb=RandomizedSearchCV(lgb,lgb_param_grid, n_jobs=-1, cv=5, refit=True)\n",
        "gs_lgb.fit(train_data,train_target,early_stopping_rounds=150,eval_set=evals)\n",
        "\n",
        "\n",
        "lgb=gs_xgb.best_estimator_\n",
        "lgb.predict(val_data)\n",
        "\n",
        "print('gs_lgb.best_params_:', gs_lgb.best_params_)\n",
        "print('gs_lgb.best_score_:', gs_lgb.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IWV2hB7ZXCwd",
        "outputId": "18014e54-8a72-46fd-c91a-5774ec17439c"
      },
      "execution_count": 312,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\ttraining's binary_logloss: 0.502433\tvalid_1's binary_logloss: 0.531507\n",
            "Training until validation scores don't improve for 150 rounds.\n",
            "[2]\ttraining's binary_logloss: 0.45668\tvalid_1's binary_logloss: 0.502226\n",
            "[3]\ttraining's binary_logloss: 0.427704\tvalid_1's binary_logloss: 0.493723\n",
            "[4]\ttraining's binary_logloss: 0.395007\tvalid_1's binary_logloss: 0.481114\n",
            "[5]\ttraining's binary_logloss: 0.377721\tvalid_1's binary_logloss: 0.479265\n",
            "[6]\ttraining's binary_logloss: 0.366594\tvalid_1's binary_logloss: 0.476466\n",
            "[7]\ttraining's binary_logloss: 0.355897\tvalid_1's binary_logloss: 0.477073\n",
            "[8]\ttraining's binary_logloss: 0.346233\tvalid_1's binary_logloss: 0.474174\n",
            "[9]\ttraining's binary_logloss: 0.338049\tvalid_1's binary_logloss: 0.474735\n",
            "[10]\ttraining's binary_logloss: 0.330785\tvalid_1's binary_logloss: 0.474868\n",
            "[11]\ttraining's binary_logloss: 0.324902\tvalid_1's binary_logloss: 0.475072\n",
            "[12]\ttraining's binary_logloss: 0.318857\tvalid_1's binary_logloss: 0.477891\n",
            "[13]\ttraining's binary_logloss: 0.308232\tvalid_1's binary_logloss: 0.477125\n",
            "[14]\ttraining's binary_logloss: 0.304969\tvalid_1's binary_logloss: 0.47783\n",
            "[15]\ttraining's binary_logloss: 0.299287\tvalid_1's binary_logloss: 0.478419\n",
            "[16]\ttraining's binary_logloss: 0.295797\tvalid_1's binary_logloss: 0.48237\n",
            "[17]\ttraining's binary_logloss: 0.29235\tvalid_1's binary_logloss: 0.483496\n",
            "[18]\ttraining's binary_logloss: 0.288712\tvalid_1's binary_logloss: 0.484605\n",
            "[19]\ttraining's binary_logloss: 0.285928\tvalid_1's binary_logloss: 0.484776\n",
            "[20]\ttraining's binary_logloss: 0.282969\tvalid_1's binary_logloss: 0.485684\n",
            "[21]\ttraining's binary_logloss: 0.281241\tvalid_1's binary_logloss: 0.487385\n",
            "[22]\ttraining's binary_logloss: 0.279474\tvalid_1's binary_logloss: 0.487704\n",
            "[23]\ttraining's binary_logloss: 0.276024\tvalid_1's binary_logloss: 0.488437\n",
            "[24]\ttraining's binary_logloss: 0.273891\tvalid_1's binary_logloss: 0.488635\n",
            "[25]\ttraining's binary_logloss: 0.271025\tvalid_1's binary_logloss: 0.488774\n",
            "[26]\ttraining's binary_logloss: 0.268309\tvalid_1's binary_logloss: 0.48888\n",
            "[27]\ttraining's binary_logloss: 0.265163\tvalid_1's binary_logloss: 0.488499\n",
            "[28]\ttraining's binary_logloss: 0.262186\tvalid_1's binary_logloss: 0.488571\n",
            "[29]\ttraining's binary_logloss: 0.260486\tvalid_1's binary_logloss: 0.491278\n",
            "[30]\ttraining's binary_logloss: 0.257306\tvalid_1's binary_logloss: 0.493152\n",
            "[31]\ttraining's binary_logloss: 0.254817\tvalid_1's binary_logloss: 0.496111\n",
            "[32]\ttraining's binary_logloss: 0.251983\tvalid_1's binary_logloss: 0.496652\n",
            "[33]\ttraining's binary_logloss: 0.2504\tvalid_1's binary_logloss: 0.497178\n",
            "[34]\ttraining's binary_logloss: 0.248755\tvalid_1's binary_logloss: 0.498312\n",
            "[35]\ttraining's binary_logloss: 0.245785\tvalid_1's binary_logloss: 0.501244\n",
            "[36]\ttraining's binary_logloss: 0.244399\tvalid_1's binary_logloss: 0.502761\n",
            "[37]\ttraining's binary_logloss: 0.242197\tvalid_1's binary_logloss: 0.506741\n",
            "[38]\ttraining's binary_logloss: 0.239867\tvalid_1's binary_logloss: 0.510588\n",
            "[39]\ttraining's binary_logloss: 0.237659\tvalid_1's binary_logloss: 0.511772\n",
            "[40]\ttraining's binary_logloss: 0.235955\tvalid_1's binary_logloss: 0.512752\n",
            "[41]\ttraining's binary_logloss: 0.233497\tvalid_1's binary_logloss: 0.515399\n",
            "[42]\ttraining's binary_logloss: 0.230845\tvalid_1's binary_logloss: 0.519024\n",
            "[43]\ttraining's binary_logloss: 0.228369\tvalid_1's binary_logloss: 0.520501\n",
            "[44]\ttraining's binary_logloss: 0.226314\tvalid_1's binary_logloss: 0.523969\n",
            "[45]\ttraining's binary_logloss: 0.224275\tvalid_1's binary_logloss: 0.52691\n",
            "[46]\ttraining's binary_logloss: 0.221471\tvalid_1's binary_logloss: 0.526693\n",
            "[47]\ttraining's binary_logloss: 0.219225\tvalid_1's binary_logloss: 0.529581\n",
            "[48]\ttraining's binary_logloss: 0.217192\tvalid_1's binary_logloss: 0.530588\n",
            "[49]\ttraining's binary_logloss: 0.214828\tvalid_1's binary_logloss: 0.531568\n",
            "[50]\ttraining's binary_logloss: 0.214043\tvalid_1's binary_logloss: 0.532277\n",
            "[51]\ttraining's binary_logloss: 0.212527\tvalid_1's binary_logloss: 0.533687\n",
            "[52]\ttraining's binary_logloss: 0.210923\tvalid_1's binary_logloss: 0.534692\n",
            "[53]\ttraining's binary_logloss: 0.209405\tvalid_1's binary_logloss: 0.5355\n",
            "[54]\ttraining's binary_logloss: 0.207629\tvalid_1's binary_logloss: 0.538502\n",
            "[55]\ttraining's binary_logloss: 0.205661\tvalid_1's binary_logloss: 0.540971\n",
            "[56]\ttraining's binary_logloss: 0.204068\tvalid_1's binary_logloss: 0.544519\n",
            "[57]\ttraining's binary_logloss: 0.202797\tvalid_1's binary_logloss: 0.545191\n",
            "[58]\ttraining's binary_logloss: 0.202324\tvalid_1's binary_logloss: 0.544194\n",
            "[59]\ttraining's binary_logloss: 0.200854\tvalid_1's binary_logloss: 0.547785\n",
            "[60]\ttraining's binary_logloss: 0.199871\tvalid_1's binary_logloss: 0.549341\n",
            "[61]\ttraining's binary_logloss: 0.197867\tvalid_1's binary_logloss: 0.551603\n",
            "[62]\ttraining's binary_logloss: 0.196392\tvalid_1's binary_logloss: 0.55299\n",
            "[63]\ttraining's binary_logloss: 0.194496\tvalid_1's binary_logloss: 0.555763\n",
            "[64]\ttraining's binary_logloss: 0.193173\tvalid_1's binary_logloss: 0.557897\n",
            "[65]\ttraining's binary_logloss: 0.192137\tvalid_1's binary_logloss: 0.558291\n",
            "[66]\ttraining's binary_logloss: 0.190216\tvalid_1's binary_logloss: 0.558856\n",
            "[67]\ttraining's binary_logloss: 0.18849\tvalid_1's binary_logloss: 0.559821\n",
            "[68]\ttraining's binary_logloss: 0.187206\tvalid_1's binary_logloss: 0.562026\n",
            "[69]\ttraining's binary_logloss: 0.186236\tvalid_1's binary_logloss: 0.562779\n",
            "[70]\ttraining's binary_logloss: 0.18456\tvalid_1's binary_logloss: 0.565625\n",
            "[71]\ttraining's binary_logloss: 0.183617\tvalid_1's binary_logloss: 0.565551\n",
            "[72]\ttraining's binary_logloss: 0.181982\tvalid_1's binary_logloss: 0.567389\n",
            "[73]\ttraining's binary_logloss: 0.18065\tvalid_1's binary_logloss: 0.569313\n",
            "[74]\ttraining's binary_logloss: 0.179838\tvalid_1's binary_logloss: 0.570007\n",
            "[75]\ttraining's binary_logloss: 0.17851\tvalid_1's binary_logloss: 0.571873\n",
            "[76]\ttraining's binary_logloss: 0.177431\tvalid_1's binary_logloss: 0.573461\n",
            "[77]\ttraining's binary_logloss: 0.17577\tvalid_1's binary_logloss: 0.57747\n",
            "[78]\ttraining's binary_logloss: 0.174631\tvalid_1's binary_logloss: 0.57713\n",
            "[79]\ttraining's binary_logloss: 0.173319\tvalid_1's binary_logloss: 0.578625\n",
            "[80]\ttraining's binary_logloss: 0.172422\tvalid_1's binary_logloss: 0.580007\n",
            "[81]\ttraining's binary_logloss: 0.17208\tvalid_1's binary_logloss: 0.580302\n",
            "[82]\ttraining's binary_logloss: 0.171489\tvalid_1's binary_logloss: 0.582411\n",
            "[83]\ttraining's binary_logloss: 0.170077\tvalid_1's binary_logloss: 0.583863\n",
            "[84]\ttraining's binary_logloss: 0.168853\tvalid_1's binary_logloss: 0.584679\n",
            "[85]\ttraining's binary_logloss: 0.167759\tvalid_1's binary_logloss: 0.585758\n",
            "[86]\ttraining's binary_logloss: 0.166158\tvalid_1's binary_logloss: 0.589184\n",
            "[87]\ttraining's binary_logloss: 0.165627\tvalid_1's binary_logloss: 0.590335\n",
            "[88]\ttraining's binary_logloss: 0.164391\tvalid_1's binary_logloss: 0.59072\n",
            "[89]\ttraining's binary_logloss: 0.163295\tvalid_1's binary_logloss: 0.591936\n",
            "[90]\ttraining's binary_logloss: 0.162552\tvalid_1's binary_logloss: 0.59166\n",
            "[91]\ttraining's binary_logloss: 0.161349\tvalid_1's binary_logloss: 0.593897\n",
            "[92]\ttraining's binary_logloss: 0.160364\tvalid_1's binary_logloss: 0.594317\n",
            "[93]\ttraining's binary_logloss: 0.159286\tvalid_1's binary_logloss: 0.595304\n",
            "[94]\ttraining's binary_logloss: 0.158135\tvalid_1's binary_logloss: 0.597097\n",
            "[95]\ttraining's binary_logloss: 0.157745\tvalid_1's binary_logloss: 0.597574\n",
            "[96]\ttraining's binary_logloss: 0.15724\tvalid_1's binary_logloss: 0.599756\n",
            "[97]\ttraining's binary_logloss: 0.156565\tvalid_1's binary_logloss: 0.600287\n",
            "[98]\ttraining's binary_logloss: 0.155368\tvalid_1's binary_logloss: 0.601478\n",
            "[99]\ttraining's binary_logloss: 0.15407\tvalid_1's binary_logloss: 0.60313\n",
            "[100]\ttraining's binary_logloss: 0.153032\tvalid_1's binary_logloss: 0.605129\n",
            "[101]\ttraining's binary_logloss: 0.151905\tvalid_1's binary_logloss: 0.60711\n",
            "[102]\ttraining's binary_logloss: 0.151267\tvalid_1's binary_logloss: 0.608191\n",
            "[103]\ttraining's binary_logloss: 0.150959\tvalid_1's binary_logloss: 0.608933\n",
            "[104]\ttraining's binary_logloss: 0.149929\tvalid_1's binary_logloss: 0.610284\n",
            "[105]\ttraining's binary_logloss: 0.149047\tvalid_1's binary_logloss: 0.610487\n",
            "[106]\ttraining's binary_logloss: 0.148494\tvalid_1's binary_logloss: 0.612413\n",
            "[107]\ttraining's binary_logloss: 0.147754\tvalid_1's binary_logloss: 0.614638\n",
            "[108]\ttraining's binary_logloss: 0.146777\tvalid_1's binary_logloss: 0.615526\n",
            "[109]\ttraining's binary_logloss: 0.145668\tvalid_1's binary_logloss: 0.616728\n",
            "[110]\ttraining's binary_logloss: 0.144946\tvalid_1's binary_logloss: 0.61781\n",
            "[111]\ttraining's binary_logloss: 0.14462\tvalid_1's binary_logloss: 0.618779\n",
            "[112]\ttraining's binary_logloss: 0.144261\tvalid_1's binary_logloss: 0.619324\n",
            "[113]\ttraining's binary_logloss: 0.143649\tvalid_1's binary_logloss: 0.620234\n",
            "[114]\ttraining's binary_logloss: 0.143074\tvalid_1's binary_logloss: 0.621169\n",
            "[115]\ttraining's binary_logloss: 0.142172\tvalid_1's binary_logloss: 0.62202\n",
            "[116]\ttraining's binary_logloss: 0.140934\tvalid_1's binary_logloss: 0.623955\n",
            "[117]\ttraining's binary_logloss: 0.139998\tvalid_1's binary_logloss: 0.624154\n",
            "[118]\ttraining's binary_logloss: 0.139863\tvalid_1's binary_logloss: 0.624535\n",
            "[119]\ttraining's binary_logloss: 0.138905\tvalid_1's binary_logloss: 0.625904\n",
            "[120]\ttraining's binary_logloss: 0.137794\tvalid_1's binary_logloss: 0.627418\n",
            "[121]\ttraining's binary_logloss: 0.13707\tvalid_1's binary_logloss: 0.628141\n",
            "[122]\ttraining's binary_logloss: 0.13614\tvalid_1's binary_logloss: 0.631672\n",
            "[123]\ttraining's binary_logloss: 0.135513\tvalid_1's binary_logloss: 0.632673\n",
            "[124]\ttraining's binary_logloss: 0.134741\tvalid_1's binary_logloss: 0.635024\n",
            "[125]\ttraining's binary_logloss: 0.134153\tvalid_1's binary_logloss: 0.636718\n",
            "[126]\ttraining's binary_logloss: 0.133461\tvalid_1's binary_logloss: 0.63725\n",
            "[127]\ttraining's binary_logloss: 0.132526\tvalid_1's binary_logloss: 0.639137\n",
            "[128]\ttraining's binary_logloss: 0.131861\tvalid_1's binary_logloss: 0.638882\n",
            "[129]\ttraining's binary_logloss: 0.131168\tvalid_1's binary_logloss: 0.639832\n",
            "[130]\ttraining's binary_logloss: 0.130796\tvalid_1's binary_logloss: 0.640759\n",
            "[131]\ttraining's binary_logloss: 0.129845\tvalid_1's binary_logloss: 0.64222\n",
            "[132]\ttraining's binary_logloss: 0.129092\tvalid_1's binary_logloss: 0.643394\n",
            "[133]\ttraining's binary_logloss: 0.12873\tvalid_1's binary_logloss: 0.643512\n",
            "[134]\ttraining's binary_logloss: 0.127763\tvalid_1's binary_logloss: 0.644917\n",
            "[135]\ttraining's binary_logloss: 0.127142\tvalid_1's binary_logloss: 0.645875\n",
            "[136]\ttraining's binary_logloss: 0.126454\tvalid_1's binary_logloss: 0.646026\n",
            "[137]\ttraining's binary_logloss: 0.125792\tvalid_1's binary_logloss: 0.647914\n",
            "[138]\ttraining's binary_logloss: 0.125234\tvalid_1's binary_logloss: 0.648799\n",
            "[139]\ttraining's binary_logloss: 0.124806\tvalid_1's binary_logloss: 0.648755\n",
            "[140]\ttraining's binary_logloss: 0.124262\tvalid_1's binary_logloss: 0.651347\n",
            "[141]\ttraining's binary_logloss: 0.123636\tvalid_1's binary_logloss: 0.652912\n",
            "[142]\ttraining's binary_logloss: 0.12309\tvalid_1's binary_logloss: 0.653906\n",
            "[143]\ttraining's binary_logloss: 0.122275\tvalid_1's binary_logloss: 0.654917\n",
            "[144]\ttraining's binary_logloss: 0.121935\tvalid_1's binary_logloss: 0.656372\n",
            "[145]\ttraining's binary_logloss: 0.121502\tvalid_1's binary_logloss: 0.656994\n",
            "[146]\ttraining's binary_logloss: 0.120698\tvalid_1's binary_logloss: 0.658978\n",
            "[147]\ttraining's binary_logloss: 0.119996\tvalid_1's binary_logloss: 0.65895\n",
            "[148]\ttraining's binary_logloss: 0.119118\tvalid_1's binary_logloss: 0.658701\n",
            "[149]\ttraining's binary_logloss: 0.118323\tvalid_1's binary_logloss: 0.661388\n",
            "[150]\ttraining's binary_logloss: 0.117833\tvalid_1's binary_logloss: 0.661432\n",
            "[151]\ttraining's binary_logloss: 0.117322\tvalid_1's binary_logloss: 0.662489\n",
            "[152]\ttraining's binary_logloss: 0.117049\tvalid_1's binary_logloss: 0.663137\n",
            "[153]\ttraining's binary_logloss: 0.116274\tvalid_1's binary_logloss: 0.664184\n",
            "[154]\ttraining's binary_logloss: 0.115527\tvalid_1's binary_logloss: 0.665419\n",
            "[155]\ttraining's binary_logloss: 0.114905\tvalid_1's binary_logloss: 0.668643\n",
            "[156]\ttraining's binary_logloss: 0.114413\tvalid_1's binary_logloss: 0.669567\n",
            "[157]\ttraining's binary_logloss: 0.114029\tvalid_1's binary_logloss: 0.670085\n",
            "[158]\ttraining's binary_logloss: 0.113366\tvalid_1's binary_logloss: 0.674797\n",
            "Early stopping, best iteration is:\n",
            "[8]\ttraining's binary_logloss: 0.346233\tvalid_1's binary_logloss: 0.474174\n",
            "gs_lgb.best_params_: {'num_leaves': 58, 'n_estimators': 200, 'min_samples_split': 15, 'min_samples_leaf': 1, 'min_impurity_decrease': 0.0004, 'min_child_weight': 2, 'min_child_sample': 9, 'max_leaf_nodes': 3, 'max_features': 'sqrt', 'max_depth': 7, 'learning_rate': 0.73, 'gamma': 7, 'eval_metrics': 'auc'}\n",
            "gs_lgb.best_score_: 0.8237794004293629\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=lgb.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  # global f1_score\n",
        "  # f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc커브 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_lgb, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=lgb.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gx1z4Fav0_QY",
        "outputId": "b38e413e-fd87-4a26-d130-286ede4c988e"
      },
      "execution_count": 313,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2321  497]\n",
            " [ 310  615]]\n",
            "정확도:0.78\n",
            "정밀도:0.55\n",
            "재현율:0.66\n",
            "f1:0.6\n",
            "roc_score:0.74\n",
            "[[2321  497]\n",
            " [ 310  615]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#LGBM스태킹앙상블"
      ],
      "metadata": {
        "id": "Wv1pSHMyu0fU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=dt.predict(train_data)\n",
        "b=rf.predict(train_data)\n",
        "c=gb.predict(train_data)\n",
        "d=xgb.predict(train_data)\n",
        "\n",
        "\n",
        "a1=dt.predict(val_data)\n",
        "b1=rf.predict(val_data)\n",
        "c1=gb.predict(val_data)\n",
        "d1=xgb.predict(val_data)\n",
        "\n",
        "\n",
        "meta_train_data=np.array([a,b,c,d])\n",
        "meta_train_data=meta_train_data.T\n",
        "\n",
        "meta_val_data=np.array([a1,b1,c1,d1])\n",
        "meta_val_data=meta_val_data.T\n",
        "\n",
        "evals=[(meta_train_data,train_target),(meta_val_data,val_target)]\n",
        "lgb_param_grid={'min_samples_split':range(1,20,1),\n",
        "               'min_samples_leaf':range(1,10,1),\n",
        "               'max_depth':range(1,20,1),\n",
        "               'num_leaves':range(31,100,1),\n",
        "               'max_leaf_nodes':range(1,20,1),\n",
        "               'min_impurity_decrease':np.arange(0.0001,0.001,0.0001),\n",
        "               'n_estimators':range(50,250,50),\n",
        "               'learning_rate':np.arange(0.01,1,0.01),\n",
        "               'eval_metrics':['error','logloss','auc'],\n",
        "               'min_child_weight':range(1,20,1),\n",
        "               'max_features':['sqrt','auto','None'],\n",
        "               'gamma':range(1,10,1),\n",
        "               'min_child_sample':range(1,20,1)                  \n",
        "                }\n",
        "\n",
        "lgb=LGBMClassifier()\n",
        "gs_lgb=RandomizedSearchCV(lgb,lgb_param_grid, n_jobs=-1, cv=5, refit=True)\n",
        "gs_lgb.fit(train_data,train_target,early_stopping_rounds=150,eval_set=evals)\n",
        "\n",
        "\n",
        "lgb=gs_xgb.best_estimator_\n",
        "lgb.predict(val_data)\n",
        "\n",
        "print('gs_lgb.best_params_:', gs_lgb.best_params_)\n",
        "print('gs_lgb.best_score_:', gs_lgb.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WHXidsBIuQ_a",
        "outputId": "3ed1b2a6-59d8-4b48-c227-d4dec9d9a9c5"
      },
      "execution_count": 314,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\tvalid_0's binary_logloss: 1.03171\tvalid_1's binary_logloss: 1.47171\n",
            "Training until validation scores don't improve for 150 rounds.\n",
            "[2]\tvalid_0's binary_logloss: 2.00976\tvalid_1's binary_logloss: 3.02411\n",
            "[3]\tvalid_0's binary_logloss: 2.71459\tvalid_1's binary_logloss: 4.0894\n",
            "[4]\tvalid_0's binary_logloss: 3.14723\tvalid_1's binary_logloss: 4.73155\n",
            "[5]\tvalid_0's binary_logloss: 3.90136\tvalid_1's binary_logloss: 5.86679\n",
            "[6]\tvalid_0's binary_logloss: 3.8831\tvalid_1's binary_logloss: 5.83928\n",
            "[7]\tvalid_0's binary_logloss: 3.86224\tvalid_1's binary_logloss: 5.80786\n",
            "[8]\tvalid_0's binary_logloss: 4.45432\tvalid_1's binary_logloss: 6.69963\n",
            "[9]\tvalid_0's binary_logloss: 5.03226\tvalid_1's binary_logloss: 7.56993\n",
            "[10]\tvalid_0's binary_logloss: 5.03648\tvalid_1's binary_logloss: 7.57629\n",
            "[11]\tvalid_0's binary_logloss: 5.6135\tvalid_1's binary_logloss: 8.44515\n",
            "[12]\tvalid_0's binary_logloss: 5.61568\tvalid_1's binary_logloss: 8.44844\n",
            "[13]\tvalid_0's binary_logloss: 5.62391\tvalid_1's binary_logloss: 8.46083\n",
            "[14]\tvalid_0's binary_logloss: 6.12443\tvalid_1's binary_logloss: 9.21449\n",
            "[15]\tvalid_0's binary_logloss: 6.1183\tvalid_1's binary_logloss: 9.20527\n",
            "[16]\tvalid_0's binary_logloss: 6.13165\tvalid_1's binary_logloss: 9.22537\n",
            "[17]\tvalid_0's binary_logloss: 6.60385\tvalid_1's binary_logloss: 9.92613\n",
            "[18]\tvalid_0's binary_logloss: 6.59783\tvalid_1's binary_logloss: 9.91707\n",
            "[19]\tvalid_0's binary_logloss: 6.53712\tvalid_1's binary_logloss: 9.82566\n",
            "[20]\tvalid_0's binary_logloss: 6.53578\tvalid_1's binary_logloss: 9.82365\n",
            "[21]\tvalid_0's binary_logloss: 7.00616\tvalid_1's binary_logloss: 10.5319\n",
            "[22]\tvalid_0's binary_logloss: 7.00419\tvalid_1's binary_logloss: 10.529\n",
            "[23]\tvalid_0's binary_logloss: 7.03386\tvalid_1's binary_logloss: 10.5733\n",
            "[24]\tvalid_0's binary_logloss: 7.03268\tvalid_1's binary_logloss: 10.5719\n",
            "[25]\tvalid_0's binary_logloss: 7.84055\tvalid_1's binary_logloss: 11.7883\n",
            "[26]\tvalid_0's binary_logloss: 7.83929\tvalid_1's binary_logloss: 11.7864\n",
            "[27]\tvalid_0's binary_logloss: 7.96294\tvalid_1's binary_logloss: 11.9726\n",
            "[28]\tvalid_0's binary_logloss: 7.97079\tvalid_1's binary_logloss: 11.9844\n",
            "[29]\tvalid_0's binary_logloss: 8.01161\tvalid_1's binary_logloss: 12.0497\n",
            "[30]\tvalid_0's binary_logloss: 8.00509\tvalid_1's binary_logloss: 12.0398\n",
            "[31]\tvalid_0's binary_logloss: 7.99754\tvalid_1's binary_logloss: 12.0285\n",
            "[32]\tvalid_0's binary_logloss: 8.01951\tvalid_1's binary_logloss: 12.0634\n",
            "[33]\tvalid_0's binary_logloss: 8.01621\tvalid_1's binary_logloss: 12.0585\n",
            "[34]\tvalid_0's binary_logloss: 8.00578\tvalid_1's binary_logloss: 12.0428\n",
            "[35]\tvalid_0's binary_logloss: 8.00483\tvalid_1's binary_logloss: 12.0409\n",
            "[36]\tvalid_0's binary_logloss: 8.0108\tvalid_1's binary_logloss: 12.0499\n",
            "[37]\tvalid_0's binary_logloss: 8.00115\tvalid_1's binary_logloss: 12.0354\n",
            "[38]\tvalid_0's binary_logloss: 7.99909\tvalid_1's binary_logloss: 12.0323\n",
            "[39]\tvalid_0's binary_logloss: 8.00491\tvalid_1's binary_logloss: 12.041\n",
            "[40]\tvalid_0's binary_logloss: 8.00941\tvalid_1's binary_logloss: 12.0478\n",
            "[41]\tvalid_0's binary_logloss: 8.00747\tvalid_1's binary_logloss: 12.0449\n",
            "[42]\tvalid_0's binary_logloss: 7.99202\tvalid_1's binary_logloss: 12.0216\n",
            "[43]\tvalid_0's binary_logloss: 7.98176\tvalid_1's binary_logloss: 12.0061\n",
            "[44]\tvalid_0's binary_logloss: 7.9778\tvalid_1's binary_logloss: 12.0001\n",
            "[45]\tvalid_0's binary_logloss: 8.33751\tvalid_1's binary_logloss: 12.5418\n",
            "[46]\tvalid_0's binary_logloss: 8.3362\tvalid_1's binary_logloss: 12.5398\n",
            "[47]\tvalid_0's binary_logloss: 8.33228\tvalid_1's binary_logloss: 12.5339\n",
            "[48]\tvalid_0's binary_logloss: 8.33588\tvalid_1's binary_logloss: 12.5396\n",
            "[49]\tvalid_0's binary_logloss: 8.33896\tvalid_1's binary_logloss: 12.5443\n",
            "[50]\tvalid_0's binary_logloss: 8.34186\tvalid_1's binary_logloss: 12.5486\n",
            "[51]\tvalid_0's binary_logloss: 8.20717\tvalid_1's binary_logloss: 12.3443\n",
            "[52]\tvalid_0's binary_logloss: 8.20208\tvalid_1's binary_logloss: 12.3367\n",
            "[53]\tvalid_0's binary_logloss: 8.19915\tvalid_1's binary_logloss: 12.3323\n",
            "[54]\tvalid_0's binary_logloss: 8.2016\tvalid_1's binary_logloss: 12.3359\n",
            "[55]\tvalid_0's binary_logloss: 8.20623\tvalid_1's binary_logloss: 12.3429\n",
            "[56]\tvalid_0's binary_logloss: 8.2081\tvalid_1's binary_logloss: 12.3457\n",
            "[57]\tvalid_0's binary_logloss: 8.20731\tvalid_1's binary_logloss: 12.3443\n",
            "[58]\tvalid_0's binary_logloss: 8.21206\tvalid_1's binary_logloss: 12.3515\n",
            "[59]\tvalid_0's binary_logloss: 8.20476\tvalid_1's binary_logloss: 12.3405\n",
            "[60]\tvalid_0's binary_logloss: 8.20791\tvalid_1's binary_logloss: 12.3453\n",
            "[61]\tvalid_0's binary_logloss: 8.20625\tvalid_1's binary_logloss: 12.3428\n",
            "[62]\tvalid_0's binary_logloss: 8.14818\tvalid_1's binary_logloss: 12.2553\n",
            "[63]\tvalid_0's binary_logloss: 8.14318\tvalid_1's binary_logloss: 12.2478\n",
            "[64]\tvalid_0's binary_logloss: 8.14335\tvalid_1's binary_logloss: 12.2481\n",
            "[65]\tvalid_0's binary_logloss: 8.31026\tvalid_1's binary_logloss: 12.4994\n",
            "[66]\tvalid_0's binary_logloss: 8.31196\tvalid_1's binary_logloss: 12.5019\n",
            "[67]\tvalid_0's binary_logloss: 8.31087\tvalid_1's binary_logloss: 12.5003\n",
            "[68]\tvalid_0's binary_logloss: 8.31253\tvalid_1's binary_logloss: 12.5028\n",
            "[69]\tvalid_0's binary_logloss: 8.30413\tvalid_1's binary_logloss: 12.4896\n",
            "[70]\tvalid_0's binary_logloss: 8.24826\tvalid_1's binary_logloss: 12.4055\n",
            "[71]\tvalid_0's binary_logloss: 8.25494\tvalid_1's binary_logloss: 12.4155\n",
            "[72]\tvalid_0's binary_logloss: 8.26027\tvalid_1's binary_logloss: 12.4235\n",
            "[73]\tvalid_0's binary_logloss: 8.29213\tvalid_1's binary_logloss: 12.4713\n",
            "[74]\tvalid_0's binary_logloss: 8.29335\tvalid_1's binary_logloss: 12.4731\n",
            "[75]\tvalid_0's binary_logloss: 8.29165\tvalid_1's binary_logloss: 12.4706\n",
            "[76]\tvalid_0's binary_logloss: 8.22616\tvalid_1's binary_logloss: 12.372\n",
            "[77]\tvalid_0's binary_logloss: 8.23012\tvalid_1's binary_logloss: 12.3779\n",
            "[78]\tvalid_0's binary_logloss: 8.25605\tvalid_1's binary_logloss: 12.417\n",
            "[79]\tvalid_0's binary_logloss: 8.19331\tvalid_1's binary_logloss: 12.3227\n",
            "[80]\tvalid_0's binary_logloss: 8.19342\tvalid_1's binary_logloss: 12.3228\n",
            "[81]\tvalid_0's binary_logloss: 8.19642\tvalid_1's binary_logloss: 12.3273\n",
            "[82]\tvalid_0's binary_logloss: 8.17188\tvalid_1's binary_logloss: 12.2904\n",
            "[83]\tvalid_0's binary_logloss: 8.17549\tvalid_1's binary_logloss: 12.2958\n",
            "[84]\tvalid_0's binary_logloss: 8.17496\tvalid_1's binary_logloss: 12.295\n",
            "[85]\tvalid_0's binary_logloss: 8.16261\tvalid_1's binary_logloss: 12.2764\n",
            "[86]\tvalid_0's binary_logloss: 8.15836\tvalid_1's binary_logloss: 12.27\n",
            "[87]\tvalid_0's binary_logloss: 8.15883\tvalid_1's binary_logloss: 12.2707\n",
            "[88]\tvalid_0's binary_logloss: 8.1616\tvalid_1's binary_logloss: 12.2749\n",
            "[89]\tvalid_0's binary_logloss: 8.19236\tvalid_1's binary_logloss: 12.3212\n",
            "[90]\tvalid_0's binary_logloss: 8.19399\tvalid_1's binary_logloss: 12.3237\n",
            "[91]\tvalid_0's binary_logloss: 8.19936\tvalid_1's binary_logloss: 12.3318\n",
            "[92]\tvalid_0's binary_logloss: 8.19863\tvalid_1's binary_logloss: 12.3307\n",
            "[93]\tvalid_0's binary_logloss: 8.19756\tvalid_1's binary_logloss: 12.329\n",
            "[94]\tvalid_0's binary_logloss: 8.19214\tvalid_1's binary_logloss: 12.3209\n",
            "[95]\tvalid_0's binary_logloss: 8.45539\tvalid_1's binary_logloss: 12.7173\n",
            "[96]\tvalid_0's binary_logloss: 8.47398\tvalid_1's binary_logloss: 12.7453\n",
            "[97]\tvalid_0's binary_logloss: 8.47273\tvalid_1's binary_logloss: 12.7434\n",
            "[98]\tvalid_0's binary_logloss: 8.4742\tvalid_1's binary_logloss: 12.7456\n",
            "[99]\tvalid_0's binary_logloss: 8.47133\tvalid_1's binary_logloss: 12.7413\n",
            "[100]\tvalid_0's binary_logloss: 8.47284\tvalid_1's binary_logloss: 12.7436\n",
            "[101]\tvalid_0's binary_logloss: 8.47731\tvalid_1's binary_logloss: 12.7503\n",
            "[102]\tvalid_0's binary_logloss: 8.47544\tvalid_1's binary_logloss: 12.7475\n",
            "[103]\tvalid_0's binary_logloss: 8.47019\tvalid_1's binary_logloss: 12.7396\n",
            "[104]\tvalid_0's binary_logloss: 8.48623\tvalid_1's binary_logloss: 12.7639\n",
            "[105]\tvalid_0's binary_logloss: 8.46976\tvalid_1's binary_logloss: 12.7391\n",
            "[106]\tvalid_0's binary_logloss: 8.38514\tvalid_1's binary_logloss: 12.6132\n",
            "[107]\tvalid_0's binary_logloss: 8.39402\tvalid_1's binary_logloss: 12.6265\n",
            "[108]\tvalid_0's binary_logloss: 8.39379\tvalid_1's binary_logloss: 12.6262\n",
            "[109]\tvalid_0's binary_logloss: 8.4012\tvalid_1's binary_logloss: 12.6373\n",
            "[110]\tvalid_0's binary_logloss: 8.42242\tvalid_1's binary_logloss: 12.6692\n",
            "[111]\tvalid_0's binary_logloss: 8.37013\tvalid_1's binary_logloss: 12.5905\n",
            "[112]\tvalid_0's binary_logloss: 8.36758\tvalid_1's binary_logloss: 12.5867\n",
            "[113]\tvalid_0's binary_logloss: 8.35368\tvalid_1's binary_logloss: 12.5657\n",
            "[114]\tvalid_0's binary_logloss: 8.34195\tvalid_1's binary_logloss: 12.5481\n",
            "[115]\tvalid_0's binary_logloss: 8.33917\tvalid_1's binary_logloss: 12.5439\n",
            "[116]\tvalid_0's binary_logloss: 8.33382\tvalid_1's binary_logloss: 12.5358\n",
            "[117]\tvalid_0's binary_logloss: 8.41341\tvalid_1's binary_logloss: 12.6538\n",
            "[118]\tvalid_0's binary_logloss: 8.39098\tvalid_1's binary_logloss: 12.6201\n",
            "[119]\tvalid_0's binary_logloss: 8.40195\tvalid_1's binary_logloss: 12.6364\n",
            "[120]\tvalid_0's binary_logloss: 8.39841\tvalid_1's binary_logloss: 12.6311\n",
            "[121]\tvalid_0's binary_logloss: 8.3986\tvalid_1's binary_logloss: 12.6314\n",
            "[122]\tvalid_0's binary_logloss: 8.4\tvalid_1's binary_logloss: 12.6335\n",
            "[123]\tvalid_0's binary_logloss: 8.40482\tvalid_1's binary_logloss: 12.6408\n",
            "[124]\tvalid_0's binary_logloss: 8.33154\tvalid_1's binary_logloss: 12.5304\n",
            "[125]\tvalid_0's binary_logloss: 8.325\tvalid_1's binary_logloss: 12.5244\n",
            "[126]\tvalid_0's binary_logloss: 8.32016\tvalid_1's binary_logloss: 12.5171\n",
            "[127]\tvalid_0's binary_logloss: 8.31857\tvalid_1's binary_logloss: 12.5147\n",
            "[128]\tvalid_0's binary_logloss: 8.31635\tvalid_1's binary_logloss: 12.5114\n",
            "[129]\tvalid_0's binary_logloss: 8.31698\tvalid_1's binary_logloss: 12.5123\n",
            "[130]\tvalid_0's binary_logloss: 8.32904\tvalid_1's binary_logloss: 12.5305\n",
            "[131]\tvalid_0's binary_logloss: 8.32992\tvalid_1's binary_logloss: 12.5318\n",
            "[132]\tvalid_0's binary_logloss: 8.28705\tvalid_1's binary_logloss: 12.4673\n",
            "[133]\tvalid_0's binary_logloss: 8.28809\tvalid_1's binary_logloss: 12.4688\n",
            "[134]\tvalid_0's binary_logloss: 8.25996\tvalid_1's binary_logloss: 12.4267\n",
            "[135]\tvalid_0's binary_logloss: 8.26084\tvalid_1's binary_logloss: 12.428\n",
            "[136]\tvalid_0's binary_logloss: 8.26054\tvalid_1's binary_logloss: 12.4276\n",
            "[137]\tvalid_0's binary_logloss: 8.25962\tvalid_1's binary_logloss: 12.4262\n",
            "[138]\tvalid_0's binary_logloss: 8.26264\tvalid_1's binary_logloss: 12.4307\n",
            "[139]\tvalid_0's binary_logloss: 8.26289\tvalid_1's binary_logloss: 12.4311\n",
            "[140]\tvalid_0's binary_logloss: 8.30948\tvalid_1's binary_logloss: 12.5013\n",
            "[141]\tvalid_0's binary_logloss: 8.31655\tvalid_1's binary_logloss: 12.5119\n",
            "[142]\tvalid_0's binary_logloss: 8.31972\tvalid_1's binary_logloss: 12.5167\n",
            "[143]\tvalid_0's binary_logloss: 8.2852\tvalid_1's binary_logloss: 12.4647\n",
            "[144]\tvalid_0's binary_logloss: 8.28314\tvalid_1's binary_logloss: 12.4616\n",
            "[145]\tvalid_0's binary_logloss: 8.29784\tvalid_1's binary_logloss: 12.4842\n",
            "[146]\tvalid_0's binary_logloss: 8.30215\tvalid_1's binary_logloss: 12.4907\n",
            "[147]\tvalid_0's binary_logloss: 8.29924\tvalid_1's binary_logloss: 12.4863\n",
            "[148]\tvalid_0's binary_logloss: 8.29965\tvalid_1's binary_logloss: 12.487\n",
            "[149]\tvalid_0's binary_logloss: 8.32415\tvalid_1's binary_logloss: 12.5227\n",
            "[150]\tvalid_0's binary_logloss: 8.31091\tvalid_1's binary_logloss: 12.5027\n",
            "[151]\tvalid_0's binary_logloss: 8.38371\tvalid_1's binary_logloss: 12.6123\n",
            "Early stopping, best iteration is:\n",
            "[1]\tvalid_0's binary_logloss: 1.03171\tvalid_1's binary_logloss: 1.47171\n",
            "gs_lgb.best_params_: {'num_leaves': 51, 'n_estimators': 200, 'min_samples_split': 12, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.0002, 'min_child_weight': 3, 'min_child_sample': 2, 'max_leaf_nodes': 15, 'max_features': 'sqrt', 'max_depth': 10, 'learning_rate': 0.87, 'gamma': 5, 'eval_metrics': 'auc'}\n",
            "gs_lgb.best_score_: 0.8002874347232108\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=lgb.predict(val_data)\n",
        "def get_clf_eval(val_target, pred):\n",
        "  accuracy=np.round(accuracy_score(val_target, pred),2)\n",
        "  precision=np.round(precision_score(val_target,pred),2)\n",
        "  recall=np.round(recall_score(val_target,pred),2)\n",
        "  # global f1_score\n",
        "  # f1_score=np.round(f1_score(val_target,pred),2)\n",
        "  roc_score=np.round(roc_auc_score(val_target,pred),2)\n",
        "  print('오차행렬')\n",
        "  print(confusion_matrix(val_target,pred))\n",
        "  print('정확도:{}'.format(accuracy))\n",
        "  print('정밀도:{}'.format(precision))\n",
        "  print('재현율:{}'.format(recall))\n",
        "  print('f1:{}'.format(f1_score))\n",
        "  print('roc_score:{}'.format(roc_score))\n",
        "get_clf_eval(val_target, pred)\n",
        "\n",
        "#auc커브 시각화\n",
        "fig=plt.figure(figsize=(5,5))\n",
        "ax1=fig.add_subplot(1,1,1)\n",
        "from sklearn.metrics import plot_roc_curve\n",
        "plt.plot([0,1],[0,1],'k--',label='Random')\n",
        "plot_roc_curve(gs_lgb, val_data, val_target,ax=ax1)\n",
        "\n",
        "\n",
        "#시각화\n",
        "predict_data=lgb.predict(val_data)\n",
        "from sklearn.metrics import confusion_matrix\n",
        "conf_mx=confusion_matrix(val_target,predict_data)\n",
        "print(conf_mx)\n",
        "plt.matshow(conf_mx, cmap=plt.cm.gray)\n",
        "###########################################\n",
        "row_sums=conf_mx.sum(axis=1, keepdims=True)\n",
        "norm_conf_mx=conf_mx/row_sums\n",
        "np.fill_diagonal(norm_conf_mx,0)\n",
        "plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xPtT1f5A1CX6",
        "outputId": "254563f3-79ae-483e-9ea1-a7bb42c482c9"
      },
      "execution_count": 315,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "오차행렬\n",
            "[[2321  497]\n",
            " [ 310  615]]\n",
            "정확도:0.78\n",
            "정밀도:0.55\n",
            "재현율:0.66\n",
            "f1:0.6\n",
            "roc_score:0.74\n",
            "[[2321  497]\n",
            " [ 310  615]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
